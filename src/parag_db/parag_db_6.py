from parag_model.parag_model  import *

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_category        = Parag_Model_Category()
_category.name   = "proceduri operationale"
PARAG_CATEGORY_6 = _category

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este riscul asociat zborului cu acceleratorul actionat:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "risc marit de inchideri ale voalurii"))
_question.answers.append(Parag_Model_Answer(False, "risc marit de angajare in limita de viteza"))
_question.answers.append(Parag_Model_Answer(False, "nici un risc, acest regim de zbor prezinta maximum de siguranta"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul unui viraj strans :")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "viteza de angajare creste"))
_question.answers.append(Parag_Model_Answer(False, "viteza de angajare scade"))
_question.answers.append(Parag_Model_Answer(False, "viteza de angajare ramane neschimbata"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Cum se explica tendinta de viraj in cazul inchiderilor asimetrice:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "aripa deformata (inchisa) are rezistenta la inaintare mai mare decat cea ramasa deschisa"))
_question.answers.append(Parag_Model_Answer(False, "comanda corespunzatoare aripii inchise are efect mai mare, la aceeasi cursa"))
_question.answers.append(Parag_Model_Answer(False, "inchiderile asimetrice nu duc la tendinte de viraj sau autorotatie"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Riscul de twist este mai mare cand:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "chinga de piept este foarte stransa"))
_question.answers.append(Parag_Model_Answer(True, "folosim seleta este de tip cocoon"))
_question.answers.append(Parag_Model_Answer(False, "chinga de piept este foarte larga "))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul saltului (tranzitie) intre doua termici este recomandat:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "sa pilotati cat mai putin folosind comenzile si cat mai mult prin balansarea laterala a corpului"))
_question.answers.append(Parag_Model_Answer(False, "sa pilotati cat mai mult folosind comenzile si cat mai putin  prin balansarea laterala a corpului"))
_question.answers.append(Parag_Model_Answer(False, "sa folositi speedul pentru viraje prin actionarea lui asimetrica"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este diferenta dintre vrie si spirala picata:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "in cazul vriei (negativa)  fileurile de aer se desprind de pe extrados"))
_question.answers.append(Parag_Model_Answer(False, "in cazul spiralei picate fileurile de aer se desprind de pe extrados"))
_question.answers.append(Parag_Model_Answer(False, "ambele manevre sunt identice din punct de vedere aerodinamic, este doar o diferenta de terminologie"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Trecerea printr-o masa de aer descendenta are ca efect:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "micsorarea finetei reale"))
_question.answers.append(Parag_Model_Answer(False, "micsorarea finetei aerodinamice"))
_question.answers.append(Parag_Model_Answer(False, "cresterea finetei in zbor, prin cresterea componentei verticale a vitezei"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmatia adevarata:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "vria este o metoda de coborare rapida"))
_question.answers.append(Parag_Model_Answer(True, "vria (negativa) este o manevra  periculoasa"))
_question.answers.append(Parag_Model_Answer(False, "vria si spirala picata sunt identice in cazul parapantei"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti cea mai sigura manevra de coborare rapida:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "urechi"))
_question.answers.append(Parag_Model_Answer(False, "cravata"))
_question.answers.append(Parag_Model_Answer(False, "vrie"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul manevrei URECHI controlul pe directie se face:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "exclusiv prin balansarea corpului stanga-dreapta"))
_question.answers.append(Parag_Model_Answer(False, "exclusv cu ajutorul comenzilor"))
_question.answers.append(Parag_Model_Answer(False, "exclusiv cu ajutorul chingilor Last"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In cazul cedarii comenzilor pilotajul parapantei se va face:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "cu ajutorul chingii Last (chinga spate)cu amplitudine mult mai mare decat in cazul actionarii comenzilor"))
_question.answers.append(Parag_Model_Answer(False, "cu ajutorul chingilor B cu amplitudine mica"))
_question.answers.append(Parag_Model_Answer(True, "cu ajutorul chingii Last ( chinga spate)cu amplitudine mult mai mica decat in cazul actionarii comenzilor"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La ce viteza de zbor se obtine infundarea minima:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "mai mare decat viteza la finete maxima"))
_question.answers.append(Parag_Model_Answer(False, "la viteza minima de zbor"))
_question.answers.append(Parag_Model_Answer(True, "la viteza mai mica decat viteza la finete maxima"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Decolarea se executa:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "cu viteza mica pentru a nu afecta gonflajul voalurii"))
_question.answers.append(Parag_Model_Answer(False, "cu viteza constanta pentru a putea mentine panta de zbor"))
_question.answers.append(Parag_Model_Answer(True, "cu alergare accelerata progresiv"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Enumerati fazele decolarii:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "gonflaj, control vizual al aripii, accelerare, desprindere"))
_question.answers.append(Parag_Model_Answer(False, "gonflaj, desprindere, stabilizare"))
_question.answers.append(Parag_Model_Answer(False, "alergare, gonflaj, desprindere, stabilizare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul procedurii de decolare, in zbor la panta, cine are prioritate:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "pilotul care urmeaza sa decoleze "))
_question.answers.append(Parag_Model_Answer(True, "pilotul care se afla in aer in zbor la panta in zona decolarii"))
_question.answers.append(Parag_Model_Answer(False, "daca mai exista cineva in zbor la panta decolarea este interzisa indiferent de zona de zbor"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul zborului la panta, doi piloti se afla la acelasi nivel, fata in fata. Cine are prioritate:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "pilotul care are panta in dreapta"))
_question.answers.append(Parag_Model_Answer(False, "pilotul care are panta in stanga, avand prioritate de stanga"))
_question.answers.append(Parag_Model_Answer(False, "nu exista prioritate in zbor la panta numai in zbor termic"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La zborul in termica cine da sensul de spiralare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "primul pilot care a intrat in termica"))
_question.answers.append(Parag_Model_Answer(False, "ultimul pilot care a intrat in termica"))
_question.answers.append(Parag_Model_Answer(False, "fiecare pilot spiraleaza pe ce parte doreste, nu exista rrgula in acest sens"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul zborului doua parapante se intalnesc la acelasi nivel, fata in fata. Care este procedura de evitare a abordajului:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "fiecare parapanta va vira spre dreapta"))
_question.answers.append(Parag_Model_Answer(False, "fiecare parapanta va vira spre stanga"))
_question.answers.append(Parag_Model_Answer(False, "nu exista o regula in acest sens"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Sunteti in zbor si din dreapta dvs vine un alt aparat de zbor fara motor. Care este procedura de evitare a abordajului:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "are prioritate aparatul care vine din dreapta, dvs veti vira la stanga sau la dreapta pt degajare"))
_question.answers.append(Parag_Model_Answer(False, "are prioritate aparatul care vine din stanga, adica dvs"))
_question.answers.append(Parag_Model_Answer(False, "are prioritate aparatul care vine din dreapta, dvs veti vira la dreapta  pt degajare"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul procedurilor de aterizare in zona sunt o parapanta si un motodeltaplan. Cine are prioritate:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "parapanta fiind aparat de zbor fara motor"))
_question.answers.append(Parag_Model_Answer(False, "motodeltaplanul, avand greutate proprie mai mare"))
_question.answers.append(Parag_Model_Answer(False, "motodeltaplanul, avand viteza mai mare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti elementele obligatorii din procedura de aterizare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "priza in U sau L"))
_question.answers.append(Parag_Model_Answer(True, "vant de fata"))
_question.answers.append(Parag_Model_Answer(True, "degajarea zonei de aterizare cat mai rapid cu putinta "))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmati corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "decolarea se face exclusiv cu vant de spate, pt a asigura o viteza corespunzatoare in timpul alergarii"))
_question.answers.append(Parag_Model_Answer(False, "decolarea se face mentinand comenzile sus pana dupa desprindere"))
_question.answers.append(Parag_Model_Answer(True, "alergarea in timpul decolarii se face cu viteza progresiv crescatoare"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti elementele periculoase din timpul procedurii de aterizare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "vant de spate"))
_question.answers.append(Parag_Model_Answer(True, "zbor la viteza aproape de viteza de angajare"))
_question.answers.append(Parag_Model_Answer(False, "priza in U sau L"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti elementele periculoase din timpul zborului in termica:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "spiralarea in contrasens cu ceilalti piloti aflati in aceeasi termica"))
_question.answers.append(Parag_Model_Answer(True, "nesustinerea virajului"))
_question.answers.append(Parag_Model_Answer(False, "folosirea inclinarii corpului in timpul spiralarii"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti calitatile necesare unei zone de decolare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "sa aiba spatiu de renuntare"))
_question.answers.append(Parag_Model_Answer(True, "sa aiba inclinare mai mare decat finetea parapantei"))
_question.answers.append(Parag_Model_Answer(False, "sa aiba prag de desprindere cat mai accentuat"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este directia vantului permisa pentru decolare la panta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "de la zero grade (vant de fata) pana la 90 de grade lateral fata masurand de la perpendiculara pe panta"))
_question.answers.append(Parag_Model_Answer(True, "de la zero grade (vant de fata) pana la 45 de grade lateral fata masurand de la perpendiculara pe panta"))
_question.answers.append(Parag_Model_Answer(False, "este recomandata decolarea cu vant de spate atunci cand este cazul"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este viteza de desprindere recomandata in timpul procedurii de decolare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "viteza maxima de zbor"))
_question.answers.append(Parag_Model_Answer(False, "viteza la finete"))
_question.answers.append(Parag_Model_Answer(True, "viteza corespunzatoare vitezei minime de infundare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Finetea adevarata a parapantei poate varia in functie de:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "regimul de zbor"))
_question.answers.append(Parag_Model_Answer(True, "traversarea unei mase de aer ascendente sau descendente"))
_question.answers.append(Parag_Model_Answer(True, "traversarea unei mase de aer turbulente"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Tensiunea in comenzi creste datorita:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "cresterii presiunii in voalura"))
_question.answers.append(Parag_Model_Answer(True, "cresterii unghiului de incidenta"))
_question.answers.append(Parag_Model_Answer(False, "cresterii vitezei de zbor"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La traversarea unei zone cu descendente, pentru a pierde cat mai putina inaltime, este recomandat sa zburati la regim:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "de infundare minima"))
_question.answers.append(Parag_Model_Answer(False, "la finete maxima"))
_question.answers.append(Parag_Model_Answer(True, "la viteza cat mai mare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul virajului, fata de zborul pe panta normala, rectilinie,  asupra aparatului de zbor actioneaza in plus:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "forta centrifuga"))
_question.answers.append(Parag_Model_Answer(False, "forta coriolis"))
_question.answers.append(Parag_Model_Answer(False, "efectul coanda "))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pilotajul activ inseamna:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "mentinerea unei tensiuni cat mai constante in comenzi, si folosirea balansarii laterale pentru echilibrare, in timpul zborului in turbulente"))
_question.answers.append(Parag_Model_Answer(False, "folosirea balansarii laterale pentru echilibrare in timpul zborului in turbulente"))
_question.answers.append(Parag_Model_Answer(False, "folosirea exclusiva a comenzilor in timpul zborului in turbulente"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmatia corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "la traversarea unei zone turbulente finetea scade"))
_question.answers.append(Parag_Model_Answer(False, "la traversarea unei zone descendente finetea creste"))
_question.answers.append(Parag_Model_Answer(False, "la traversarea unei zone descendente finetea ramane neschimbata"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("O parapanta omologata LTF 2 (EN –C) este destinata:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "exclusiv pilotilor incepatori"))
_question.answers.append(Parag_Model_Answer(False, "exclusiv zborului in tandem"))
_question.answers.append(Parag_Model_Answer(True, "exclusiv pilotilor cu nivel mediu/ridicat de pregatire"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Zborul cu pasager presupune:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "licenta de pilot"))
_question.answers.append(Parag_Model_Answer(True, "licenta de pilot calificarea tandem"))
_question.answers.append(Parag_Model_Answer(False, "parapanta omologata LTF 1"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul manvrei URECHI este permis:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "sa folositi balansarea laterala pentru controlul pe directie"))
_question.answers.append(Parag_Model_Answer(True, "sa actionati speedul"))
_question.answers.append(Parag_Model_Answer(False, "sa executati si B stall pentru o coborare mai eficienta"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Controlul traiectoriei in timpul spiralarii se face:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "exclusiv folosind comenzile"))
_question.answers.append(Parag_Model_Answer(False, "exclusiv folosind balansarea laterala a corpului comenzile fiind mentinute la 50% din cursa pentru a obtine o infundare minima"))
_question.answers.append(Parag_Model_Answer(True, "folosind balansarea laterala a corpului si comenzile"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In cazul inchiderii asimetrice, procedura de recuperare este:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "balansarea laterala a corpului, incarcand aripa deschisa, corijarea moderata a directiei folosind comanda de pe aripa deschisa si pomparea aripii inchise"))
_question.answers.append(Parag_Model_Answer(False, "balansarea laterala a corpului si eliberarea completa a ambelor comenzi"))
_question.answers.append(Parag_Model_Answer(False, "pomparea energica a aripii inchise folosind comanda, si eliberarea compleata a comenzii de pe aripa deschisa"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce fenomene se regasesc in timpul inchiderii asimetrice:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "cresterea rezistentei la inaintare a aripii inchise"))
_question.answers.append(Parag_Model_Answer(False, "lipsa de comanda corespunzatoare aripii inchise"))
_question.answers.append(Parag_Model_Answer(True, "tendinta de viraj a parapantei pe partea aripii inchise"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul virajului, la atingerea unghiului critic, parapanta va intra in :")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "deepstall"))
_question.answers.append(Parag_Model_Answer(True, "vrie (negativa)"))
_question.answers.append(Parag_Model_Answer(False, "spirala picata"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In urma unei inchideri asimetrice majore, peste 50%, observati ca suspantele sunt rasucite (twist). Care este manevra corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "lansarea imediata a rezervei"))
_question.answers.append(Parag_Model_Answer(False, "inclinarea corpului pe exteriorul spiralei si dezrasucirea imediata"))
_question.answers.append(Parag_Model_Answer(False, "dezrasucirea folosind chingile portsuspante fara a elibera comenzile"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti motivele pentru care trebuie sa renuntati la decolare chiar daca aveti aripa gonflata corect:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "casca nelegata"))
_question.answers.append(Parag_Model_Answer(True, "vant de spate"))
_question.answers.append(Parag_Model_Answer(False, "turbulente usoare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti motivele pentru care trebuie sa renuntati la decolare chiar daca aveti aripa gonflata corect:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "suspante incalcite"))
_question.answers.append(Parag_Model_Answer(False, "declansare termica"))
_question.answers.append(Parag_Model_Answer(True, "alta parapanta in procedura de toplanding"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul procedurii de aterizare viteza recomandata pentru apropiere este:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "aproape de viteza minima de zbor"))
_question.answers.append(Parag_Model_Answer(False, "aproape de viteza maxima de zbor"))
_question.answers.append(Parag_Model_Answer(True, "intre viteza corespunzatoare infundarii minime si finetei maxime"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul zborului la finete maxima sau la viteza maxima care este principalul pericol daca intalnim turbulente:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "inchidere frontala sau asimetrica datorita unghiului de incidenta mic"))
_question.answers.append(Parag_Model_Answer(False, "angajare in limita de viteza datorita unghiului de incidenta mare"))
_question.answers.append(Parag_Model_Answer(False, "vrie datorita regimului de zbor asimetric"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question(" Zburati intr-o zona muntoasa, pietroasa, cu vai (duze). Ce situatii dificile credeti ca veti intalni:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "termica violenta"))
_question.answers.append(Parag_Model_Answer(True, "rotoare in zonele de sub vant"))
_question.answers.append(Parag_Model_Answer(True, "efect venturi la traversarea vailor sau pe creste"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care dintre urmatoarele sunt manevre de coborare rapida:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "vrie"))
_question.answers.append(Parag_Model_Answer(True, "spirala picata"))
_question.answers.append(Parag_Model_Answer(True, "urechi"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Inainte de decolare este obligatoriu:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "sa verificam directia si viteza vantului in locul de decolare"))
_question.answers.append(Parag_Model_Answer(True, "sa verificam directia si viteza vantului in minim 3 locuri pe panta de zbor"))
_question.answers.append(Parag_Model_Answer(False, "sa verificam directia si viteza vantului in zona de decolare si de aterizare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In zonele rotorice (sub vant, in spatele pantei) exista posibilitatea ca o maneca de vant sa arate vant de fata:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "da, daca este in zona ascendenta a rotorului"))
_question.answers.append(Parag_Model_Answer(False, "nu, maneca de vant va arata intodeauna vant de spate"))
_question.answers.append(Parag_Model_Answer(False, "nu, in rotor curgerea masei de aer este haotica dar niciodata ascendenta pe panta de sub vant."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Contactul cu solul la aterizare se va face:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "la unghi critic"))
_question.answers.append(Parag_Model_Answer(False, "la viteza manima de infundare"))
_question.answers.append(Parag_Model_Answer(False, "la finete maxima"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti care dintre urmatoarele fenomene pot fi intalnite in zbor la panta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "efect venturi"))
_question.answers.append(Parag_Model_Answer(False, "efect coriollis"))
_question.answers.append(Parag_Model_Answer(False, "efect de camp"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In procedura de decolare este necesar:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "sa decolati cu comenzile la inele, corespunzator vitezei la finete maxima"))
_question.answers.append(Parag_Model_Answer(False, "sa mentineti viteza de zbor constanta pe tot timpul decolarii pana dupa desprindere"))
_question.answers.append(Parag_Model_Answer(True, "sa alergati accelerand progresiv pana la desprindere"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La intrarea in termica sunteti obligat sa:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "acordati prioritate celor ce spiraleaza deja in termica"))
_question.answers.append(Parag_Model_Answer(False, "folositi acceleratorul imediat ce creste vectorul urcarii pentru a obtine o urcare constanta"))
_question.answers.append(Parag_Model_Answer(False, "folositi doar patrularea in 8 – uri pentru a avea urcare constanta"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In zbor la panta, de la ce inaltime puteti trece la spiralare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "minim 50m"))
_question.answers.append(Parag_Model_Answer(False, "imediat ce ati intrat in termica"))
_question.answers.append(Parag_Model_Answer(False, "minim 150m"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care dintre urmatoarele categorii de omologare nu permit zborul in termica:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "EN – A"))
_question.answers.append(Parag_Model_Answer(False, "EN – B"))
_question.answers.append(Parag_Model_Answer(True, "toate parapantele omologate pot sa zboare in termica"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La intrarea in termica, la acelasi nivel cu dvs mai spiraleaza un deltaplan. Cum veti proceda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "intrati respectand sensul de spiralare al deltaplanului, in spatele lui"))
_question.answers.append(Parag_Model_Answer(False, "incepeti spiralarea in orice sens, parapanta are intodeauna prioritate"))
_question.answers.append(Parag_Model_Answer(False, "intrati in termica in fata deltaplanului pentru a fi vizibil si spiralati impreuna parapanta avand intodeauna prioritate inclusiv la schimbarea sensului de spiralare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In zbor la panta, aveti panta in partea stanga, din fata la acelasi nivel vine un deltaplan. Cum veti proceda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "mentineti directia, parapanta are totdeauna prioritate"))
_question.answers.append(Parag_Model_Answer(True, "degajati spre dreapta si acordati prioritate deltaplanului"))
_question.answers.append(Parag_Model_Answer(False, "degajati spre stanga si acordati prioritate deltaplanului"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este ordinea corecta de echipare pentru zbor:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "casca, seleta, parapanta"))
_question.answers.append(Parag_Model_Answer(False, "seleta, parapanta, casca"))
_question.answers.append(Parag_Model_Answer(False, "parapanta, seleta casca"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce trebuie sa faceti la traversarea unei zone ascendente, care duce la marirea inaltimii de zbor cu 5-15m, in timpul procedurii de aterizare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "franati puternic parapanta mentinad directia neschimbata"))
_question.answers.append(Parag_Model_Answer(True, "printr-o serie de viraje in S veti reveni la panta normala de aterizare "))
_question.answers.append(Parag_Model_Answer(False, "actionati speedul pentru a intra pe panta normala de aterizare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Imediat dupa decolare comanda stanga se dezleaga de la nod, devenind inoperabila. Cum veti proceda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "veti pilota folosind exclusiv comanda dreapta si balansarea corpului in lateral, mergand cat mai repede la aterizare"))
_question.answers.append(Parag_Model_Answer(True, "veti pilota folosind balansarea corpului in lateral si chingile Last, cu amplitudine mai mica, mergand cat mai repede la aterizare"))
_question.answers.append(Parag_Model_Answer(False, "veti pilota exclusiv folosind balasarea laterala a corpului, mergand cat mai repede la aterizare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care sunt riscurile principale la traversarea unei zone turbulente la regim de finete maxima sau viteza maxima:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "inchideri majore eventual twist"))
_question.answers.append(Parag_Model_Answer(False, "angajare si full stall"))
_question.answers.append(Parag_Model_Answer(False, "nu sunt riscuri suplimentare in aceste regimuri de zbor, toate parapantele omologate fiind stabile"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmatia corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "la intrarea in termica peste 3 m/s veti frana brusc pentru a zbura la regim de infundare minima cat mai repede"))
_question.answers.append(Parag_Model_Answer(True, "la intrarea in termica de peste 3 m/s veti mentine aripa stabila prin pilotaj activ si apoi incepeti centrarea si zborul la regim de infundare minima"))
_question.answers.append(Parag_Model_Answer(False, "la intrarea in termica de peste 3m/s incepeti  urgent spiralarea pentru a ajunge la miez cat mai repede"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul executarii manvrei B stall viteza pe orizontala a parapantei se va modifica astfel:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "va creste"))
_question.answers.append(Parag_Model_Answer(True, "va scadea pana aproape de zero"))
_question.answers.append(Parag_Model_Answer(False, "va ramane neschimbata"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question(" Alegeti manevrele de coborare rapida:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "vrie"))
_question.answers.append(Parag_Model_Answer(False, "fulstall"))
_question.answers.append(Parag_Model_Answer(True, "B-stall"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmatia corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "cu manevra urechi se poate regla panta inainte de aterizare"))
_question.answers.append(Parag_Model_Answer(False, "cu manevra urechi nu se poate regla panta inainte de aterizare"))
_question.answers.append(Parag_Model_Answer(False, "cu manevra b- stall se poate regla panta inainte de aterizare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La aterizarea in zone care prezinta ascendenta usoara sau turbulenta usoara se recomanda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "spatiul de renuntare"))
_question.answers.append(Parag_Model_Answer(False, "traseu alternativ"))
_question.answers.append(Parag_Model_Answer(False, "traiectul sondei meteo"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Spatiul de renuntare este:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "zona de aterizare alternativa"))
_question.answers.append(Parag_Model_Answer(False, "traiect alternativ"))
_question.answers.append(Parag_Model_Answer(True, "spatiul cuprins in zona de decolare care permite renuntarea decolarii in conditii de securitate"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmatia corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "in timpul virajului viteza de infundare scade"))
_question.answers.append(Parag_Model_Answer(True, "in timpul virajului viteza de infundare creste"))
_question.answers.append(Parag_Model_Answer(False, "in timpul virajului viteza de infundare ramane constanta"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti conditiile obligatorii necesare zborului cu parapanta in Romania:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "informare la COAP"))
_question.answers.append(Parag_Model_Answer(False, "lipsa totala a altor categorii de aeronave in zona de zbor"))
_question.answers.append(Parag_Model_Answer(False, "conditii meteo CAVOK"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Mentiunea CAVOK in METAR presupune in mod obligatoriu:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "interzicerea zborului, conditii meteo periculoase"))
_question.answers.append(Parag_Model_Answer(False, "interzicerea zborului, trafic aerian aglomerat in zona"))
_question.answers.append(Parag_Model_Answer(True, "nu exista restrictii speciale in acest caz"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Sunteti in termica impreuna cu alte parapante si in aceeasi termica intra si un planor. Cum veti proceda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "parasiti termica, planorul fiind clasa superioara, are prioritate"))
_question.answers.append(Parag_Model_Answer(True, "continuati sa zburati mentinand sensul de spiralare "))
_question.answers.append(Parag_Model_Answer(False, "continuati sa zburati si schimbati sensul de spiralare pentru a fi mai vizibil de catre planor"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In zbor la panta, are prioritate neconditionata:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "parapanta care vine din dreapta"))
_question.answers.append(Parag_Model_Answer(False, "parapanta care decoleaza"))
_question.answers.append(Parag_Model_Answer(True, "parapanta in procedura de aterizare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question(" Alegeti procedura sigura in cazul aterizarii pe teren necunoscut:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "apropierea in priza directa"))
_question.answers.append(Parag_Model_Answer(True, "apropierea cu priza in L sau U"))
_question.answers.append(Parag_Model_Answer(False, "apropierea cu urechi sau B-stall"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul virajului stabilizat si sustinut viteza de curgere a fileurilor de aer pe cele doua semiaripi este:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "mai mare pe aripa exterioara"))
_question.answers.append(Parag_Model_Answer(False, "mai mica pe aripa exterioara"))
_question.answers.append(Parag_Model_Answer(False, "egala"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La traversarea unei zone turbulente se recomanda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "aterizarea "))
_question.answers.append(Parag_Model_Answer(False, "actionarea speedului"))
_question.answers.append(Parag_Model_Answer(True, "eliberarea speedului daca acesta este actionat"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti manevrele de coborare rapida:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "spirala picata"))
_question.answers.append(Parag_Model_Answer(True, "B-stall"))
_question.answers.append(Parag_Model_Answer(False, "vrie"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La ce se foloseste actionarea suspantei stabilo :")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "la executarea manevrei de urechi"))
_question.answers.append(Parag_Model_Answer(False, "la pilotaj atunci cand comenzile devin inoperabile"))
_question.answers.append(Parag_Model_Answer(True, "la scoaterea unei cravate"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Cand se recomanda actionarea suspantelor stabilo concomitent si simetric:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "niciodata"))
_question.answers.append(Parag_Model_Answer(False, "la executarea manevrei de urechi"))
_question.answers.append(Parag_Model_Answer(False, "la executarea manevrei B-stall"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Alegeti afirmatia corecta:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "decolarea cu vant zero este interzisa"))
_question.answers.append(Parag_Model_Answer(True, "decolarea cu vant zero presupune viteza de alergare mai mare fata de decolarea pe conditii de vant de fata"))
_question.answers.append(Parag_Model_Answer(False, "decolarea cu vant zero presupune viteza de alergare mai mare fata de decolarea pe conditii de vant de spate"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul aterizarii pe panta se recomanda:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "aterizarea in contrapanta"))
_question.answers.append(Parag_Model_Answer(True, "aterizarea in lungul pantei"))
_question.answers.append(Parag_Model_Answer(False, "aterizarea folosind acceleratorului"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question(" Actionarea acceleratorului are ca efect:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "reducerea vitezei de zbor"))
_question.answers.append(Parag_Model_Answer(False, "dublarea vitezei de zbor"))
_question.answers.append(Parag_Model_Answer(True, "cresterea vitezei de zbor "))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Efectul venturi poate fi intalnit:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "pe creste cand vantul este perpendicular pe creasta"))
_question.answers.append(Parag_Model_Answer(True, "pe vai cand vantul este in lungul vaii"))
_question.answers.append(Parag_Model_Answer(False, "nu poate fi regasit in natura fiind doar un fenomen aerodinamic"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Reglajul vitezei de zbor se face:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "folosind comenzile sau acceleratorul"))
_question.answers.append(Parag_Model_Answer(False, "folosind exclusiv trimerul"))
_question.answers.append(Parag_Model_Answer(False, "folosind exclusiv acceleratorul"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Fazele aterizarii sunt:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "priza, redresare, franare finala"))
_question.answers.append(Parag_Model_Answer(False, "priza, franare finala"))
_question.answers.append(Parag_Model_Answer(False, "redresare, fullstall"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care dintre urmatoarele reprezinta pericol major in procedura de aterizare:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "angajarea la mai mult de 0,5m inaltime"))
_question.answers.append(Parag_Model_Answer(False, "inchideri asimetrice la mai putin de 200m inaltime"))
_question.answers.append(Parag_Model_Answer(False, "angajarea la mai putin de 0,5m inaltime"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Regimul de zbor la finete se foloseste in urmatoarele cazuri:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "dupa centrarea in termica si trecerea la spiralare"))
_question.answers.append(Parag_Model_Answer(False, "pentru centrarea eficienta in termica"))
_question.answers.append(Parag_Model_Answer(True, "pentru obtinerea unghiului maxim de panta, de exemplu la salt (tranzitie) de la o termica la alta"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul manevrei urechi:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "creste unghiul de incidenta"))
_question.answers.append(Parag_Model_Answer(False, "scade unghiul de incidenta"))
_question.answers.append(Parag_Model_Answer(False, "unghiul de incidenta ramane neschimbat"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In timpul procedurii de decolare unghiul de atac este: ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "variabil "))
_question.answers.append(Parag_Model_Answer(False, "fix "))
_question.answers.append(Parag_Model_Answer(False, "variaza doar daca se actioneaza acceleratorul"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Regimurile de zbor ale parapantei sunt: ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "viteza minima, viteza maxima, viteza accelerata"))
_question.answers.append(Parag_Model_Answer(True, "viteza la infundare minima, viteza la finete maxima, viteza maxima"))
_question.answers.append(Parag_Model_Answer(False, "viteza de angajare, viteza maxima, viteza la finete"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Cresterea incarcarii alare modifica performantele parapantei: ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "da "))
_question.answers.append(Parag_Model_Answer(False, "nu "))
_question.answers.append(Parag_Model_Answer(False, "incarcarea alara nu are legatura cu domeniul zborului"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In momentul angajarii unei parapante")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "presiunea in comenzi scade brusc"))
_question.answers.append(Parag_Model_Answer(False, "viteza de inaintare creste brusc"))
_question.answers.append(Parag_Model_Answer(True, "viteza de infundare creste brusc"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este diferenta dintre vrie si spirala picata:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "in cazul vriei fileurile de aer se desprind de pe extrados"))
_question.answers.append(Parag_Model_Answer(False, "in cazul spiralei picate fileurile de aer se desprind de pe extrados"))
_question.answers.append(Parag_Model_Answer(False, "ambele manevre sunt identice din punct de vedere aerodinamic, este doar o diferenta de terminologie"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La ce viteza de zbor se obtine infundarea minima:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "mai mare decat viteza la finete maxima"))
_question.answers.append(Parag_Model_Answer(False, "la viteza minima de zbor"))
_question.answers.append(Parag_Model_Answer(True, "la viteza mai mica decat viteza la finete maxima"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Rezerva se arunca de preferat in cazul unei rotatii necontrolabile:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "in directia rotatiei"))
_question.answers.append(Parag_Model_Answer(True, "contra rotatiei"))
_question.answers.append(Parag_Model_Answer(False, "nu are importanta"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La aruncarea rezervei se da drumul la maner:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "da"))
_question.answers.append(Parag_Model_Answer(False, "nu"))
_question.answers.append(Parag_Model_Answer(False, "nu conteaza"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("In cazul ruperii unei comenzi franarea la aterizare  se face prin:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "tragerea simetrica a chingilor LAST "))
_question.answers.append(Parag_Model_Answer(False, "tragerea simetrica a chingilor C"))
_question.answers.append(Parag_Model_Answer(False, "tragerea simetrica a suspantelor  stabilo"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Mentinerea pozitiei aplecat in timpul alergarii pentru decolare faciliteaza:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "manevrabilitatea parapantei"))
_question.answers.append(Parag_Model_Answer(False, "reglajul vitezei"))
_question.answers.append(Parag_Model_Answer(True, "mentinerea tensiunii constante a suspantelor pe parcursul procedurii de decolare"))

"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când un pilot a consumat cantități mai mari de substanțe precum alcool, nicotină sau droguri, la ce efecte asupra capacității sale de zbor se poate aștepta?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Rău de mișcare."))
_question.answers.append(Parag_Model_Answer(False, "Incapacitatea de a zbura în curenții termici."))
_question.answers.append(Parag_Model_Answer(False, "Incapacitatea de a efectua mișcări coordonate de menținere a direcției."))
_question.answers.append(Parag_Model_Answer(True, "Nivelul redus al oxigenului din aer va avea un efect negativ mai puternic asupra performanței pilotului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La ce efecte se poate aștepta un pilot cu o răceală gravă și otită (inflamația urechii medii) în timpul zborului său?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Putere de concentrare redusă, percepția și judecata afectată, performanța corporală redusă."))
_question.answers.append(Parag_Model_Answer(True, "Durere de cap bruscă și foarte acută."))
_question.answers.append(Parag_Model_Answer(False, "Absorbția foarte redusă a oxigenului în plămâni."))
_question.answers.append(Parag_Model_Answer(False, "Deteriorarea corpului datorită deshidratării."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Până la ce altitudine se poate adapta, o persoană aflată în stare de repaus, la diferitele condiții atmosferice în schimbare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "aprox. la 2.000 m deasupra nivelului mării."))
_question.answers.append(Parag_Model_Answer(False, "aprox. la 3.000 m deasupra nivelului mării."))
_question.answers.append(Parag_Model_Answer(True, "aprox. la 4.000 m deasupra nivelului mării."))
_question.answers.append(Parag_Model_Answer(False, "aprox. la 5.000 m deasupra nivelului mării."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La ce efecte ne putem aștepta atunci când corpul uman nu se poate adapta creșterii altitudinii?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "durere de cap bruscă și foarte acută."))
_question.answers.append(Parag_Model_Answer(True, "stare de euforie și confuzie."))
_question.answers.append(Parag_Model_Answer(False, "greață și senzație de rău."))
_question.answers.append(Parag_Model_Answer(False, "dificultăți de respirație."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Euforia de altitudine mare (începutul răului de altitudine) este rezultatul")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "temperaturii scăzute și hipotermiei rezultate."))
_question.answers.append(Parag_Model_Answer(False, "turbulențelor predominante la altitudine mare."))
_question.answers.append(Parag_Model_Answer(False, "umidității scăzute și deshidratarea corpului rezultată."))
_question.answers.append(Parag_Model_Answer(True, "presiunii reduse a aerului și reducerea asociată a presiunii oxigenului, rezultând o oxigenare insuficientă a corpului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Conținutul de oxigen al aerului se schimbă cu altitudinea. Efectele semnificative asupra corpului uman pot fi reduse foarte mult prin")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "consumul regulat de suplimente cu vitamina C."))
_question.answers.append(Parag_Model_Answer(False, "consumul preventiv de suplimente / medicamente pentru răul de mișcare (kinetosis)."))
_question.answers.append(Parag_Model_Answer(False, "respirația profundă în mod conștient la intervale mai scurte."))
_question.answers.append(Parag_Model_Answer(True, "exerciții fizice regulate și aclimatizare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când o parapantă zboară la o viteză de 32 km / h într-o masă de aer de 2 ° C, efectul de răcire asupra corpului pilotului este comparabil cu o temperatură în aer calm de ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "+ 8 ° C "))
_question.answers.append(Parag_Model_Answer(False, "+ 2 ° C "))
_question.answers.append(Parag_Model_Answer(False, "- 0 ° C"))
_question.answers.append(Parag_Model_Answer(True, "- 11 ° C"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce se întâmplă cu corpul uman atunci când temperatura lui scade sub limita normală?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Performanța fizică și nevoile de oxigen scad."))
_question.answers.append(Parag_Model_Answer(True, "Performanța fizică scade și nevoia de oxigen crește."))
_question.answers.append(Parag_Model_Answer(False, "Performanța fizică și nevoile de oxigen cresc."))
_question.answers.append(Parag_Model_Answer(False, "Performanța fizică crește și nevoia de oxigen scade."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Atunci când corpul uman este expus vântului pentru o perioadă lungă de timp, ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "nevoia de oxigen crește considerabil."))
_question.answers.append(Parag_Model_Answer(True, "nevoia de lichide crește considerabil."))
_question.answers.append(Parag_Model_Answer(False, "nevoia de proteine crește considerabil."))
_question.answers.append(Parag_Model_Answer(False, "nevoia de vitamine crește considerabil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La Sibiu se anunță un QNH de 1015. Ce înseamnă acest lucru?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "În Sibiu presiunea atmosferică este de 1015 hPa."))
_question.answers.append(Parag_Model_Answer(True, "La Sibiu, presiunea la nivelul mării calculată în conformitate cu atmosfera standard a ICAO este de 1015 hPa."))
_question.answers.append(Parag_Model_Answer(False, "Presiunea standard în Sibiu ,conform ICAO, este 1015 hPa."))
_question.answers.append(Parag_Model_Answer(False, "Presiunea maximă din Sibiu în această zi este de 1015 hPa."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Printre altele, ce etape formează o parte din pregătirea pentru zbor într-un loc nou?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Inspectați terenul de aterizare, studiați hărțile de spațiul aerian, înregistrați zborul cel mai apropiat aeroport."))
_question.answers.append(Parag_Model_Answer(False, "Studiați hărțile de spațiul aerian, înregistrați zborul cel mai apropiat aeroport, planificați zborul în funcție de condiții."))
_question.answers.append(Parag_Model_Answer(False, "Înregistrați zborul cu șeful celui mai apropiat aeroport, planificați zborul în funcție de condiții, inspectați câmpul de aterizare."))
_question.answers.append(Parag_Model_Answer(True, "Planificați zborul în funcție de condiții, inspectați câmpul de aterizare, studiați hărțile de spațiul aerian și obstacolele aeriene."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care este cel mai important criteriu în alegerea unui loc de decolare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Decolarea trebuie să fie echipată cu o mânecă de vânt."))
_question.answers.append(Parag_Model_Answer(True, "Locul ar trebui să permită oprirea a manevrei de decolare în siguranță în orice moment."))
_question.answers.append(Parag_Model_Answer(False, "Vântul trebuie să vină din față."))
_question.answers.append(Parag_Model_Answer(False, "Locul de decolare trebuie să fie foarte abrupt pentru a facilita o manevră de decolare cât mai rapidă."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La locul de decolare suflă vântul cu 15 km / h. Ce se poate aștepta în ceea ce privește distanța necesară și viteza de decolare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Distanța de decolare este scurtă, viteza este ridicată."))
_question.answers.append(Parag_Model_Answer(True, "Distanța de decolare este scurtă, viteza este scăzută."))
_question.answers.append(Parag_Model_Answer(False, "Distanța de decolare este lungă, viteza este ridicată."))
_question.answers.append(Parag_Model_Answer(False, "Distanța de decolare este lungă, viteza este scăzută."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La locul de decolare este pantă lină și vântul nu suflă. Ce se poate aștepta în ceea ce privește distanța necesară și viteza de decolare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Distanța de decolare este scurtă, viteza este ridicată."))
_question.answers.append(Parag_Model_Answer(False, "Distanța de decolare este scurtă, viteza este scăzută."))
_question.answers.append(Parag_Model_Answer(True, "Distanța de decolare este lungă, viteza este ridicată."))
_question.answers.append(Parag_Model_Answer(False, "Distanța de decolare este lungă, viteza este scăzută."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În zona de decolare nu suflă vântul, care sunt cele mai importante criterii pentru un loc de decolare adecvat?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Decolarea trebuie să fie echipată cu o mânecă de vânt."))
_question.answers.append(Parag_Model_Answer(True, "Zona din fața parapantei trebuie să fie cât mai liberă de obstacole sau denivelări."))
_question.answers.append(Parag_Model_Answer(False, "Zona din spatele parapantei trebuie să fie cât mai liberă de obstacole sau denivelări."))
_question.answers.append(Parag_Model_Answer(False, "Locul de decolare trebuie să fie foarte abrupt pentru a facilita o manevră de decolare cât mai rapidă."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În zona de decolare suflă vântul cu 20 km / h, care sunt cele mai importante criterii pentru un loc de decolare adecvat?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Decolarea trebuie să fie echipată cu o mânecă de vânt."))
_question.answers.append(Parag_Model_Answer(False, "Zona din fața parapantei trebuie să fie cât mai liberă de obstacole sau denivelări."))
_question.answers.append(Parag_Model_Answer(True, "Zona din spatele parapantei trebuie să fie cât mai liberă de obstacole sau denivelări."))
_question.answers.append(Parag_Model_Answer(False, "Locul de decolare trebuie să fie foarte abrupt pentru a facilita o manevră de decolare cât mai rapidă."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Atunci când decolați dintr-un coridor din pădure, trebuie să fiți conștienți de și pregătiți pentru această posibilitate:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "datorită diferenței mari de temperatură între pădure și câmp, vor fi prezente termici puternice și frecvente cu turbulența asociată lor."))
_question.answers.append(Parag_Model_Answer(True, "vântul este calm la nivelul solului, deși la vârful copacilor vânt suflă mai puternic, rezultând turbulențe puternice la acea înălțime."))
_question.answers.append(Parag_Model_Answer(False, "în coridorul umbrit dintre pădurile însorite, vântul suflă invers la nivelul solului, ceea ce face dificilă trecerea peste arborii din față."))
_question.answers.append(Parag_Model_Answer(False, "când se trece peste primii arbori, pot apărea termici puternice din cauza diferenței de temperatură între pădure și coridor."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care sunt indiciile că încercați să decolați de pe partea de sub vânt a muntelui? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Vânt de spate constant, de 5 - 10 km / h. "))
_question.answers.append(Parag_Model_Answer(False, "Forța și direcția vântului se schimbă brusc. "))
_question.answers.append(Parag_Model_Answer(False, "Cicluri constante între vânt zero și vânturi termice de diferite intensități. "))
_question.answers.append(Parag_Model_Answer(False, "La altitudini mai mari, norii se deplasează peste decolare din față. "))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când la locul de decolare vântul suflă cu 25 km / h, care este cea mai bună metodă de a decola?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Pilotul se poziționează pe o pantă abruptă cât mai aproape posibil de marginea posterioară a parapantei și accelerează cât mai repede posibil, pentru a gonfla energic parapanta."))
_question.answers.append(Parag_Model_Answer(False, "Pilotul ar trebui să decoleze cu spatele la parapantă ori de câte ori condițiile o permit, deoarece aceasta este de departe cea mai sigură metodă de decolare."))
_question.answers.append(Parag_Model_Answer(False, "Pilotul gonfleaza cu fața la parapantă pe o pantă abruptă, astfel încât acesta să fie ridicat de îndată ce parapanta este sus."))
_question.answers.append(Parag_Model_Answer(True, "Pilotul gonfleaza cu fața la parapantă pe o pantă lină și are grijă să nu fie ridicat involuntar, înainte de a fi pregătit."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care dintre următoarele este verificarea celor 5 puncte a decolării corectă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "1. Seletă, cască și parașută de rezervă închisă și asigurată; 2. Chingile și suspantele dispuse corect; 3. Etalarea voalurii satisfăcătoare; 4. Direcția și intensitatea vântului; 5. Spațiul aerian"))
_question.answers.append(Parag_Model_Answer(False, "1. Chingile și suspantele dispuse corect; 2. Etalarea voalurii satisfăcătoare;3. Direcția și intensitatea vântului; 4. Spațiul aerian; 5. Seletă, cască și parașută de rezervă închisă și asigurată."))
_question.answers.append(Parag_Model_Answer(False, "1. Etalarea voalurii satisfăcătoare; 2. Direcția și intensitatea vântului; 3. Spațiul aerian; 4. Seletă, cască și parașută de rezervă închisă și asigurată; 5. Chingile și suspantele dispuse corect."))
_question.answers.append(Parag_Model_Answer(False, "1. Direcția și intensitatea vântului; 2. Spațiul aerian; 3. Seletă, cască și parașută de rezervă închisă și asigurată; 4. Chingile și suspantele dispuse corect; 5. Etalarea voalurii satisfăcătoare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Se modifică verificarea celor 5 puncte atunci când decolarea se efectuează cu fața la voalură într-un vânt de 25 km / h?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Nu"))
_question.answers.append(Parag_Model_Answer(False, "Da, prin aceea că nu se poate verifica direcția și forța vântului."))
_question.answers.append(Parag_Model_Answer(False, "Da, prin faptul că nu se poate verifica voalura."))
_question.answers.append(Parag_Model_Answer(True, "Da, după gonflare și întoarcere, trebuie să verificați din nou că spațiul de accelerare și spațiul aerian sunt libere."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În ce moment ar trebui pilotul să se asigure că spațiul aerian și zona de accelerare sunt libere?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Înainte ca pilotul să se pregătească pentru decolare."))
_question.answers.append(Parag_Model_Answer(False, "Înainte ca pilotul să etaleze parapanta pe locul de decolare."))
_question.answers.append(Parag_Model_Answer(True, "Chiar înainte de manevra de decolare."))
_question.answers.append(Parag_Model_Answer(False, "Când pilotul a terminat etalarea parapantei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care sunt posibilele consecințe ale decolării cu chingile de la picioare ale seletei deschise? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Pilotul nu se poate simți confortabil în seletă. "))
_question.answers.append(Parag_Model_Answer(False, "Pilotul trebuie să lase frânele după decolare pentru a intra în seletă în mod corespunzător. "))
_question.answers.append(Parag_Model_Answer(True, "Pilotul poate aluneca din seletă, ducând la o cădere fatală. "))
_question.answers.append(Parag_Model_Answer(False, "Parapanta nu poate fi condusă prin schimbare de greutate a corpului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care ar putea fi consecințele dacă chingile de la picioare ale seletei nu sunt strânse înaintea decolării?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Pilotul poate aluneca din seletă, ducând la o cădere fatală. "))
_question.answers.append(Parag_Model_Answer(True, "Pilotul ar putea fi nevoit, după decolare, să ia ambele comenzi într-o singură mână pentru a intra în seletă în mod corespunzător."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta trage constant într-o parte."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta nu poate fi condusă prin schimbare de greutate a corpului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce se întâplă dacă parapanta este udă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Finețea parapantei este mult redusă."))
_question.answers.append(Parag_Model_Answer(False, "Viteza de pdecolare, zbor și aterizare sunt considerabil mai mari."))
_question.answers.append(Parag_Model_Answer(True, "Parapanta se gonflează greu și necesită mai mult efort pentru a o aduce deasupra capului."))
_question.answers.append(Parag_Model_Answer(False, "Stabilitatea caracteristicilor de zbor va fi considerabil afectată."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot găsește condițiile de la locul de decolare ca fiind provocatoare. El ar trebui să")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "lase pe alți piloți să decoleze mai întâi pentru a concluziona că, așa cum au decolat ei fără probleme, atunci poate și el."))
_question.answers.append(Parag_Model_Answer(False, "decoleze, având în vedere că siguranța este garantată la locul de decolare oficial."))
_question.answers.append(Parag_Model_Answer(True, "decoleze numai atunci când este convins că o poate face fără probleme."))
_question.answers.append(Parag_Model_Answer(False, "decoleze, pentru că, în calitate de utilizator frecvent al acestui loc de decolare, concluzia e că va putea decola și de această dată în condiții de siguranță."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Procedura de decolare cu parapanta are trei faze. Cum se numesc acestea?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1. Gonflare 2. Controlul / corecția 3. Frânarea"))
_question.answers.append(Parag_Model_Answer(False, "1. Control 2. Gonflare 3. Accelerare"))
_question.answers.append(Parag_Model_Answer(False, "1. Gonflare 2. Frânarea 3. Accelerare"))
_question.answers.append(Parag_Model_Answer(True, "1. Gonflare 2. Controlul / corecția 3. Accelerare"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În ce fază, cel mai târziu, puteți să renunțați la decolare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "În niciuna dintre faze."))
_question.answers.append(Parag_Model_Answer(False, "În faza de gonflare."))
_question.answers.append(Parag_Model_Answer(True, "În faza de control și corecție."))
_question.answers.append(Parag_Model_Answer(False, "În faza de accelerare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe o decolare orientata spre sud veti avea un vant de la 120 ° la 5 noduri. Care este cea mai bună abordare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Gonflați parapanta spre sud și apoi accelerați în direcția sud-vest pentru a compensa pentru vântul lateral."))
_question.answers.append(Parag_Model_Answer(False, "Gonflați parapanta în vânt și accelerați în diagonală pe pantă, cu fața în vânt."))
_question.answers.append(Parag_Model_Answer(True, "Gonflați parapanta în vânt și întoarceți-vă progresiv spre vale și accelerați."))
_question.answers.append(Parag_Model_Answer(False, "Decolarea ar trebui întreruptă deoarece vântul lateral prezintă un risc prea mare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Decolarea cu vânt zero la 3.600m deasupra nivelului mării este diferită de decolarea cu vânt zero la 1.400m deasupra nivelului mării, în sensul că distnța pe care trebuie să o alergați la 3600m este")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "mai scurtă datorită performanței umane mai bune de la altitudine."))
_question.answers.append(Parag_Model_Answer(False, "mai scurtă, deoarece accelerația poate fi mai mare datorită densității reduse a aerului."))
_question.answers.append(Parag_Model_Answer(True, "mai lungă, deoarece densitatea mai mică a aerului trebuie compensată cu o viteză mai mare de decolare."))
_question.answers.append(Parag_Model_Answer(False, "la fel - nu există nici o diferență."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("După decolare, un pilot nu se poate așeza corect în seletă, deoarece și-a lăsat chingile de la picioare ale seletei prea largi. Ce ar trebui acesta să facă? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Să libereze imediat comenzile pentru a trage placa seletei sub el."))
_question.answers.append(Parag_Model_Answer(False, "Cu comenzile în mâini, să apuce imediat placa seletei și să o tragă sub el."))
_question.answers.append(Parag_Model_Answer(True, "Să zboare de lângă pantă, să pună ambele comenzi într-o mână și cu cealaltă mână să tragă placa seletei sub el."))
_question.answers.append(Parag_Model_Answer(False, "comenzile nu trebuie eliberate în timpul zborului. Dacă pilotul nu poate intra cu succes în sleltă fără a folosi mâinile acesta ar trebui să execute o aterizare de urgență."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("De ce comenzile nu trebuie niciodată eliberate imediat după decolare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Deoarece la scurt timp după decolare există pericolul ca presiunea statică din parapantă să scadă și parapanta să se prăbușească."))
_question.answers.append(Parag_Model_Answer(True, "În cazul unei închideri ale voalurii aproape de sol, un pilot nu poate compensa în timp util dacă trebuie să caute comenzile."))
_question.answers.append(Parag_Model_Answer(False, "Deoarece parapanta trebuie să fie frânată puternic imediat după decolare, pentru a crește performanța parapantei suficient pentru a decola."))
_question.answers.append(Parag_Model_Answer(False, "Datorită turbulențelor adesea prezente aproape de sol, pilotul are nevoie de comenzi pentru a se trage înapoi în poziție verticală dacă atinge din nou solul."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Imediat după decolare, pilotul își dă seama că trebuie să frâneze mult în partea dreaptă pentru a zbura drept. Care ar putea fi cauza? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Vântul lateral din dreapta. "))
_question.answers.append(Parag_Model_Answer(False, "Vânt lateral puternic din stânga. "))
_question.answers.append(Parag_Model_Answer(True, "Are un nod în suspantele de pe partea stânga. "))
_question.answers.append(Parag_Model_Answer(False, "Are un nod în suspantele de pe partea stânga."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Imediat după decolare, pilotul își dă seama că trebuie să frâneze din greu în partea dreaptă pentru a zbura direct în față. Observă un nod între suspantele D și suapantele comenzii din stânga. Care sunt consecințele?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Parapanta este mai sensibilă la turbulențe și se închide mai ușor."))
_question.answers.append(Parag_Model_Answer(True, "Tendința de a intra în angajare parașutată este mai mare, iar atunci când se virează spre dreapta trebuie anticipată posibilitatea de angajare a parapantei."))
_question.answers.append(Parag_Model_Answer(False, "Suspantele D s-ar putea rupe datorită frecării, ducând la un accident."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o tendință mai mare de a se închide pe partea dreaptă, iar la virajul spre stânga trebuie anticipată posibilitatea de angajare a parapantei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Imediat după decolare pilotul observă un nod între suspantele A și B din partea stângă a voalurii. Care sunt consecințele?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Parapanta este mai sensibilă la turbulențe și se închide mai ușor pe partea stângă."))
_question.answers.append(Parag_Model_Answer(False, "Tendința de a intra în angajare parașutată este mai mare, iar atunci când se virează spre dreapta trebuie anticipată posibilitatea de angajare a parapantei."))
_question.answers.append(Parag_Model_Answer(False, "Suspantele A sau B s-ar putea rupe datorită frecării, ducând la un accident."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o tendință mai mare de a se închide pe partea dreaptă, iar la virajul spre stânga trebuie anticipată posibilitatea de angajare a parapantei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Imediat după decolare pilotul realizează că comanda stângă nu funcționează și descoperă un nod la scripetele de ghidaj al suspantei, de pe chinga din spate. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Să se întoarcă spre dreapta pentru a executa imediat o aterizare de urgență."))
_question.answers.append(Parag_Model_Answer(False, "Să tragă cu mai multă forță de comanda stângă, astfel încât nodul să cedeze puțin."))
_question.answers.append(Parag_Model_Answer(True, "Să zboare la o distanță sigură de pantă, conducând cu chinga din spate stânga în loc de comandă, apoi să încerce să desfacă nodul."))
_question.answers.append(Parag_Model_Answer(False, "Să tragă ambele comenzi pentru o clipă, rapid și cu forța, la 100% (pompare simetrică) pentru a elibera nodul."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot dorește să zboare cât mai departe în aer calm. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Să zboare cât mai repede posibil și să elibereze și trimerele dacă sunt instalate. "))
_question.answers.append(Parag_Model_Answer(True, "Să zboare cu presiune ușoară în comanzi (1% - 10% frânată)."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile aproximativ 20 - 30% frânate."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile aproximativ 50% frânate."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Locul de decolare este la 1.600 m AMSL iar valea de mai jos este la 400 m AMSL. Finețea indicată de  producător este de 6: 1. Care este distanța cea mai mare care se poate zbura în aer calm?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "4,8 km"))
_question.answers.append(Parag_Model_Answer(False, "6,0 km"))
_question.answers.append(Parag_Model_Answer(True, "7,2 km"))
_question.answers.append(Parag_Model_Answer(False, "8,4 km"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot dorește să zboare cât mai mult timp în aer calm. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Să zboare cât mai repede posibil și să elibereze și trimerele dacă sunt instalate. "))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu presiune ușoară în comanzi (1% - 10% frânată)."))
_question.answers.append(Parag_Model_Answer(True, "Să zboare cu comenzile aproximativ 20 - 30% frânate."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile aproximativ 50% frânate."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Poate viteza parapantei să fie influențată de poziția corpului pilotului?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Dacă în timpul zborului pilotul se apleacă înainte cu umerii apăsând chingile, parapanta se va accelera."))
_question.answers.append(Parag_Model_Answer(True, "Dacă în timpul zborului se adoptă o poziție aerodinamică, rezisența la înaintare este redusă și viteza crește ușor."))
_question.answers.append(Parag_Model_Answer(False, "Dacă picioarele sunt întinse, centrul masei se mișcă înainte, reducând astfel unghiul de atac și creșterea vitezei."))
_question.answers.append(Parag_Model_Answer(False, "Nu"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot dorește să zboare cât mai departe cu un vânt de față de 25 km / h. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Să zboare cât mai repede posibil și să elibereze și trimerele dacă sunt instalate. "))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu presiune ușoară în comanzi (1% - 10% frânată)."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile cca. 20 - 30% frânate."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile aprox. 50% frânate."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot dorește să zboare cât mai departe cu un vânt de spate de 25 km / h. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Să zboare cât mai repede posibil și să elibereze și trimerele dacă sunt instalate. "))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu presiune ușoară în comanzi (1% - 10% frânată)."))
_question.answers.append(Parag_Model_Answer(True, "Să zboare cu comenzile cca. 20 - 30% frânate."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile aprox. 50% frânate."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un zboară într-o termică care urcă cu 3 m / s. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Să zboare cât mai repede posibil și să elibereze și trimerele dacă sunt instalate. "))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu presiune ușoară în comanzi (1% - 10% frânată)."))
_question.answers.append(Parag_Model_Answer(True, "Să zboare cu comenzile cca. 20 - 30% frânate."))
_question.answers.append(Parag_Model_Answer(False, "Să zboare cu comenzile aprox. 50% frânate."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot zboară spre câmpul de aterizare exact la sud de poziția sa, cu un vânt de 25 km / h vest. Ce ar trebui să facă pentru a ajunge cât mai înalt posibil?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Ar trebui să îndrepte parapanta spre sud și să zboare cât mai repede posibil."))
_question.answers.append(Parag_Model_Answer(False, "Ar trebui să îndrepte parapanta spre aterizare și să zboare ușor frânat."))
_question.answers.append(Parag_Model_Answer(False, "Ar trebui să îndrepte parapanta spre aterizare și să zboare cât mai repede posibil."))
_question.answers.append(Parag_Model_Answer(True, "Ar trebui să îndrepte parapanta spre sud-vest și să zboare cât mai repede posibil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot zboară spre câmpul de aterizare situat exact la sud de poziția sa, cu un vânt de 20 km / h vest. Dacă își îndreaptă parapanta exact spre terenul de aterizare, care va fi traiectul lui de zbor?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(False, "3"))
_question.answers.append(Parag_Model_Answer(True, "4"))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot zboară spre câmpul de aterizare situat exact la sud de poziția sa, cu un vânt de 20 km / h vest. Dacă își îndreaptă parapanta exact spre sud, care va fi traiectul lui de zbor?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(True, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot zboară spre câmpul de aterizare situat exact la sud de poziția sa, cu un vânt de 20 km / h vest. Dacă își îndreaptă parapanta exact spre sud-vest, care va fi traiectul lui de zbor?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(False, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Unghiul de corecție pentru devia vântului (unghiul de derivă) este unghiul dintre")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "axa longitudinală (sau axa de ruliu) a parapantei și traiectoria parapantei. "))
_question.answers.append(Parag_Model_Answer(False, "axa longitudinală (sau axa de ruliu) a parapantei și direcția vântului."))
_question.answers.append(Parag_Model_Answer(False, "axa transversală a parapantei și direcția vântului."))
_question.answers.append(Parag_Model_Answer(False, "direcția vântului și traiectoria parapantei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Unghiul de corecție pentru deriva vântului (unghiul de derivă)")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "crește pe măsura intensificarea vântului lateral."))
_question.answers.append(Parag_Model_Answer(False, "scade cu intensificareaa vântului lateral."))
_question.answers.append(Parag_Model_Answer(False, "este influențată de direcția, dar nu de intensitatea vântului lateral."))
_question.answers.append(Parag_Model_Answer(False, "este influențată de intensitatea, dar nu de direcția vântului lateral."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pilotul A zboară cu 35 km / h iar pilotul B cu 50 km / h, ambii urmează aceeași traiectorie și au același vânt lateral.")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Pilotul A trebuie să aleagă un unghi de derivă mai mare decât B."))
_question.answers.append(Parag_Model_Answer(False, "Ambii trebuie să aleagă același unghi de derivă."))
_question.answers.append(Parag_Model_Answer(False, "Pilotul B trebuie să aleagă un unghi de derivă mai mare decât A."))
_question.answers.append(Parag_Model_Answer(False, "Unghiul de derivă este întotdeauna egal cu jumătate din unghiul dintre traiectorie și vântul lateral."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Unghiul de corecție pentru deriva vântului (unghiul de derivă)")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "va deveni mai mare atunci când crește viteza de zbor."))
_question.answers.append(Parag_Model_Answer(True, "va deveni mai mic atunci când crește viteza de zbor."))
_question.answers.append(Parag_Model_Answer(False, "nu este influențată de viteza de zbor."))
_question.answers.append(Parag_Model_Answer(False, "este întotdeauna jumătate din unghiul dintre direcția vântului și traiectorie."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Marimea unghiului de derivă depinde de")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "viteza de înfundare a parapantei, direcția și intensitatea vântului."))
_question.answers.append(Parag_Model_Answer(False, "viteza de înfundare a parapantei, direcția vântului și distanța de zbor."))
_question.answers.append(Parag_Model_Answer(False, "viteza parapantei, direcția vântului și distanța de zbor."))
_question.answers.append(Parag_Model_Answer(True, "viteza parapantei, direcția și intensitatea vântului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot zboară în vânt și ajunge sub un cumulus. Unde ar trebui să găsească termica?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "De îndată ce se ajunge sub cumulus."))
_question.answers.append(Parag_Model_Answer(False, "În centrul cumulusului."))
_question.answers.append(Parag_Model_Answer(True, "În partea din vânt a cumulusului."))
_question.answers.append(Parag_Model_Answer(False, "În partea de sub vânt a cumulusului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pilotul constată că, după ce a spiralat timp de 10 minute într-o termică, poziția sa deasupra solului s-a schimbat cu 3 km. Ce putem spune despre intensitatea vântului?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Nu se poate stabili din informațiile furnizate."))
_question.answers.append(Parag_Model_Answer(False, "Are o valoare medie de 30 km / h."))
_question.answers.append(Parag_Model_Answer(True, "Are o valoare medie de 18 km / h."))
_question.answers.append(Parag_Model_Answer(False, "Trebuie anticipat vânt puternic la nivelul solului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot găsește o masă de aer ascendentă și încearcă să spiraleze în ea. După un viraj de 90 ° variometrul îi indică că coboară. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Ar trebui să vireze 180 °, apoi să zboare drept, deoarece aerul ascendent trebuie să fie în fața lui și apoi să încerce să se centreze din nou în ascendență."))
_question.answers.append(Parag_Model_Answer(False, "Ar trebui să continue să vireze, cu același unghi și viteză."))
_question.answers.append(Parag_Model_Answer(False, "Ar trebui să schimbe imediat direcția de virare, întrucât cel mai probabil a virat prea devreme în termică."))
_question.answers.append(Parag_Model_Answer(False, "Întrucât măsura orizontală sau circumferința masei de aer în urcare nu permite efectuarea unui cerc complet, ar trebui să caute o altă zonă de ascendență."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În condiții fără vânt predominant, un pilot zboară într-o termică. Acest curent ascendent")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "se ridică vertical în sus."))
_question.answers.append(Parag_Model_Answer(False, "se înclină spre nord cu creșterea altitudinii."))
_question.answers.append(Parag_Model_Answer(False, "se înclină spre vest cu creșterea altitudinii."))
_question.answers.append(Parag_Model_Answer(False, "se înclină spre est cu creșterea altitudinii."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În condiții fără vânt predominant, un pilot zboară într-o termică. Ce se întâmplă când se îndepărteză prea mult de centrul termicii?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Încetează să urce și zboară cu viteza de înfundare normală."))
_question.answers.append(Parag_Model_Answer(True, "El zboară în descendența din jur și își pierde rapid altitudinea."))
_question.answers.append(Parag_Model_Answer(False, "Ascendența devine mai puternică și mai turbulentă."))
_question.answers.append(Parag_Model_Answer(False, "Ascendența devine mai puternică și mai puțin turbulentă."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În condiții fără vânt predominant, un pilot zboară într-o termică ca să câștige altitudine cât mai repede. Dintr-o data el pierde termica si variometrul lui indica o viteza mare de înfundare. Ce este, în general, cel mai bun lucru de făcut?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Un viraj strâns de 120 - 180 ° pentru a se întoarce cât mai repede posibil în termică."))
_question.answers.append(Parag_Model_Answer(False, "Un viraj 120 - 180 ° cât mai plat, pentru a pierde cât mai puțin înălțime în descendență."))
_question.answers.append(Parag_Model_Answer(False, "Zborul în cerc larg până când reapare ascendența."))
_question.answers.append(Parag_Model_Answer(False, "Zbor drept și căutat o nouă zonă de ascendență."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În condiții de vânt 5m/s din 270°, un pilot zboară într-o termică. Acest curent ascendent")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "se ridică vertical în sus.	"))
_question.answers.append(Parag_Model_Answer(False, "se înclină spre nord cu creșterea altitudinii."))
_question.answers.append(Parag_Model_Answer(False, "se înclină spre vest cu creșterea altitudinii."))
_question.answers.append(Parag_Model_Answer(True, "se înclină spre est cu creșterea altitudinii."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În condiții de vânt 5m/s din 270°, un pilot zboară într-o termică care se înclină spre est cu creșterea altitudinii. Pe care parte a termicii va fi descendența cea mai puternică?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Pe partea din vânt."))
_question.answers.append(Parag_Model_Answer(True, "Pn partea de sub vânt."))
_question.answers.append(Parag_Model_Answer(False, "Pe partea orientată spre soare."))
_question.answers.append(Parag_Model_Answer(False, "Pe partea orientată opus soarelui."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În condiții de vânt 5m/s din 270°, un pilot zboară într-o termică care se înclină spre est cu creșterea altitudinii. Pentru a nu pierde termica, pilotul")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "zboară, în general, mai mult în partea din vânt a termicii."))
_question.answers.append(Parag_Model_Answer(False, "zboară, în general, mai mult în partea de sub vânt a termicii."))
_question.answers.append(Parag_Model_Answer(False, "spiralează spre dreapta ori de câte ori este posibil."))
_question.answers.append(Parag_Model_Answer(False, "spiralează spre stânga ori de câte ori este posibil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot zboară într-o termică și dorește să zboare cât mai departe posibil. Când ar trebui să părăsească termica?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Numai când el este cel mai sus."))
_question.answers.append(Parag_Model_Answer(False, "Numai atunci când variometrul nu mai indică ascendență utilă."))
_question.answers.append(Parag_Model_Answer(True, "Numai atunci când și-a ales următorul obiectiv și are suficientă înălțime pentru a ajunge la el."))
_question.answers.append(Parag_Model_Answer(False, "Numai atunci când ajunge la 50m de baza norului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce măsuri de siguranță trebuie luate atunci când întâlniți turbulențele termice în timpul patrulării la pantă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Nu zburați niciodată sub nivelul crestei."))
_question.answers.append(Parag_Model_Answer(True, "Îndepărtați-vă de pantă și adaptați viteza corespunzător."))
_question.answers.append(Parag_Model_Answer(False, "Eliberați trimerele pentru un flux de aer mai omogen peste parapantă, reducând astfel șansele de angajare."))
_question.answers.append(Parag_Model_Answer(False, "Părăsiți panta, întrucât zborul dinamic în condiții de turbulență termică este prea periculos."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În zborul dinamic, lângă o creastă, întotdeauna virați")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "pe partea pe care se simte ascendența."))
_question.answers.append(Parag_Model_Answer(False, "pe aceeași parte cu cea mai apropiată parapantă."))
_question.answers.append(Parag_Model_Answer(True, "dinspre creastă înspre vale."))
_question.answers.append(Parag_Model_Answer(False, "dinspre creastă înspre vale sub înălțimea crestei și pe partea pe care se simte ascendența deasupra crestei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("O parapantă în zbor")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "nu produce turbulențe de siaj perceptibile atunci când zboară în intervalul inferior de viteză."))
_question.answers.append(Parag_Model_Answer(True, "produce o zonă de turbulențe de siaj ce pot fi simțite de alte parapante."))
_question.answers.append(Parag_Model_Answer(False, "produce o bandă de ascendență în spatele ei."))
_question.answers.append(Parag_Model_Answer(False, "produce o bandă de descendență în spatele ei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Turbulențele cauzate de parapante")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "nu au nici o semnificație în practică."))
_question.answers.append(Parag_Model_Answer(False, "devin mai însemnate cu creșterea înălțimii."))
_question.answers.append(Parag_Model_Answer(True, "pot provoca dificultăți altor piloți care le urmăresc prea mult, mai ales la decolare și aterizare."))
_question.answers.append(Parag_Model_Answer(False, "trebuie evitate cu orice cost când se zboară în aceeași termică."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care sunt consecințele posibile când o parapantă care zboară drept este frânată (pe ambele părți) prea mult sau prea puternic?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o închidere frontală."))
_question.answers.append(Parag_Model_Answer(True, "Fluxul de aer se separă de aripă, ducând la o angajare parașutată sau aripa se balansează în spate angajându-se total."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de o parte a aripii (angajare), rezultând plonjarea aripii spre acea parte și intrarea în vrie negativă."))
_question.answers.append(Parag_Model_Answer(False, "Aripa intră într-o spirală care se accelerează constant."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce simțim când parapanta este în angajare parașutată?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Vântul pe față, viteza peste sol este zero și parapanta se înfundă."))
_question.answers.append(Parag_Model_Answer(True, "Nici o senzație de vânt pe față, nici o presiune în frâne, iar intradosul parapantei nu mai este tensionat, adică este concav între punctele de atașare ale suspantelor."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o viteză de înfundare mare și presiunea în comenzi este foarte mare."))
_question.answers.append(Parag_Model_Answer(False, "Aripa intră într-o spirală care se accelerează constant."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot se află într-o angajare parașutată la 500 m deasupra solului. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "O parapantă certificată se va recupera dintr-o angajare paraușutală de la sine. Prin urmare, pilotul trebuie să aștepte cu comenzile ușor trase până când parapanta se va recupera."))
_question.answers.append(Parag_Model_Answer(False, "Trageți o comandă brusc și complet jos, și eliberați-o imediat."))
_question.answers.append(Parag_Model_Answer(True, "Trageți de chingile A până când parapanta zboară în mod normal din nou."))
_question.answers.append(Parag_Model_Answer(False, "Trageți ambele comenzi brusc și complet jos, și eliberați-le imediat."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe apropierea finală, la 10m deasupra solului, vă dați seama că parapanta a intrat într-o angajare parașută. Ce ar trebui să faceti?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Trageți imediat de chingile A."))
_question.answers.append(Parag_Model_Answer(False, "Lăsați parapanta în angajare parașuată, ridicați-vă în poziție verticală și să trageți ambele comenzi complet, la o înălțime de aproximativ 4m deasupra solului."))
_question.answers.append(Parag_Model_Answer(True, "Lăsați parapanta în angajare parașuată, ridicați-vă în poziție verticală, nu trageți de comenzi și pregătiți-vă pentru o cădere parasutată (PLF)."))
_question.answers.append(Parag_Model_Answer(False, "Aruncați rezerva."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Cum poate un pilot să provoace ongajare parașutată, altfel decât să tragă prea mult comenzile?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Încărcarea insuficientă a parapantei sau ieșirea necorespunzătoare din angajare cu B-urile (B-stall)."))
_question.answers.append(Parag_Model_Answer(False, "Încărcarea excesivă a parapantei sau ieșirea necorespunzătoare din angajare cu B-urile (B-stall)."))
_question.answers.append(Parag_Model_Answer(False, "Încărcarea excesivă a parapantei sau zborul într-un vânt puternic din față."))
_question.answers.append(Parag_Model_Answer(False, "Zborul într-un vânt puternic din față sau încărcarea insuficientă a parapantei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care sunt consecințele comenzii prea ample într-un viraj?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o închidere frontală."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de aripă, ducând la o angajare parașutată sau aripa se balansează în spate angajându-se total."))
_question.answers.append(Parag_Model_Answer(True, "Fluxul de aer se separă de o parte a aripii (angajare), rezultând plonjarea aripii spre acea parte și intrarea în vrie negativă."))
_question.answers.append(Parag_Model_Answer(False, "Aripa intră într-o spirală care se accelerează constant."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot virează foarte brusc, cu un unghi de înclinare mare, din zbor drept. Care sunt consecințele?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o închidere frontală."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de aripă, ducând la o angajare parașutată sau aripa se balansează în spate angajându-se total."))
_question.answers.append(Parag_Model_Answer(True, "Fluxul de aer se separă de o parte a aripii (angajare), rezultând plonjarea aripii spre acea parte și intrarea în vrie negativă."))
_question.answers.append(Parag_Model_Answer(False, "Ca rezultat al încărcării asimetrice ale parapantei, părți ale parapantei de pe acea parte ar putea deveni întinse, rezultând că parapanta să tragă într-o parte."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care sunt indiciile că o parte a parapantei s-a angajat (vrie negativă)?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Jumătatea parapantei de pe partea pe care se rotește se închide datorită scăderii presiunii din interiorul parapantei."))
_question.answers.append(Parag_Model_Answer(True, "Tensiunea din comanda interioară scade brusc și comanda nu mai opune rezistență pe întreaga ei cursă."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta intră într-o spirală accentuată rezultând un factor de încărcare mare și constant."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta devine instabilă în jurul axei longitudinale și începe să penduleze."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În timpul virajului, pilotul își dă seama că o parte a parapantei s-a angajat (vrie negativă). Care este cea mai potrivită acțiune?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Aplicarea imediată a comenzii exterioare pentru a stabiliza direcția."))
_question.answers.append(Parag_Model_Answer(False, "Pompare comanzii interioare pentru a mări presiunea internă."))
_question.answers.append(Parag_Model_Answer(True, "Eliberarea ambelor comenzi și lăsarea parapantei să recâștige viteză."))
_question.answers.append(Parag_Model_Answer(False, "Apucarea chingilor și ținerea lor pentru a minimaliza riscul unei răsuciri."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Riscul de vrie negativă poate fi minimizat dacă")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Pilotul zboară mereu cu o rezervă de viteză și cu mult simț."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta este observată în mod constant și nu se execută viraje strânse."))
_question.answers.append(Parag_Model_Answer(False, "Comanda exterioară este întotdeauna aplicată întimpul virajului, astfel încât parapanta să nu se poată angaja pe o parte."))
_question.answers.append(Parag_Model_Answer(False, "Un anemometru este folosit în zbor pentru a verifica viteza aerului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce se întâmplă dacă un pilot trage numai de chingile A pentru a accelera?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Parapanta are o închidere frontală."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de aripă, ducând la o angajare parașutată sau aripa se balansează în spate angajându-se total."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de o parte a aripii (angajare), rezultând plonjarea aripii spre acea parte și intrarea în vrie negativă."))
_question.answers.append(Parag_Model_Answer(False, "Aripa intră într-o spirală care se accelerează constant."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce consecințe pot apărea atunci când mai mult de 50% din parapantă se închide și pilotul lasă parapanta să continue să zboare fără aplicarea comenzii. ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Parapanta are o închidere frontală."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de aripă, ducând la o angajare parașutată sau aripa se balansează în spate angajându-se total."))
_question.answers.append(Parag_Model_Answer(False, "Fluxul de aer se separă de o parte a aripii (angajare), rezultând plonjarea aripii spre acea parte și intrarea în vrie negativă."))
_question.answers.append(Parag_Model_Answer(True, "Aripa intră într-o spirală care se accelerează constant."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În timpul zborului parapanta se închide brusc pe o parte. Care este acțiunea potrivită?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Pompați imediat, cu forță, comanda de pe partea închisă pentru a o redeschide cât mai repede posibil, minimizând astfel înălțimea pierdută."))
_question.answers.append(Parag_Model_Answer(False, "Aplicați la maxim ambele comenzi până când planorul este redeschis."))
_question.answers.append(Parag_Model_Answer(False, "Aplicați la maxim frâna de pe partea deschisă pentru a preveni întoarcerea parapantei spre partea închisă."))
_question.answers.append(Parag_Model_Answer(True, "Stabilizați direcția prin deplasarea greutătii corpului și frânarea atentă pe partea deschisă, apoi, dacă este necesar, pompați pe partea închisă pentru a o redeschide."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Zburați prin aer turbulent, parapanta începe să penduleze un pic în jurul axelor longitudinale și transversale. Care este acțiunea potrivită?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Așezați-vă relaxat în seletă și trageți ușor până la moderat comenzile fără a încerca să compensați pendulul."))
_question.answers.append(Parag_Model_Answer(False, "Zburați fără comenzi și, dacă este necesar, accelerați cu ajutorul chingilor A și B pentru a scăpa de turbulență cât mai repede posibil."))
_question.answers.append(Parag_Model_Answer(False, "Frânați parapanta cu 50% și țineți chingile pentru a stabiliza poziția corpului într-o anumită măsură."))
_question.answers.append(Parag_Model_Answer(False, "Stabilizați pendulul folosind frânarea promptă și fermă pe partea opusă mișcării de pendulare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Termenul "răsucire de chingi" (twist) înseamnă')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "rotația rapidă a parapantei în jurul axei verticale, prin care o jumătate din parapantă zboară spre înainte iar cealaltă spre înapoi."))
_question.answers.append(Parag_Model_Answer(False, "viraje rapide alternante, prin care parapanta are ocazional un unghi înclinare laterală de peste 90 °."))
_question.answers.append(Parag_Model_Answer(False, "viraje foarte strânse prin care factorul de încărcare datorat forței centrifuge crește semnificativ."))
_question.answers.append(Parag_Model_Answer(True, "răsucirea chingilor și a suspantelor provocate de rotația parapantei în jurul axei verticale. Datorită inerției pilotului, el nu se poate roti, în general, la fel de repede ca și parapanta."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Termenul "vrie negativă" (spin) înseamnă')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "rotația rapidă a parapantei în jurul axei verticale, prin care o jumătate din parapantă zboară spre înainte iar cealaltă spre înapoi."))
_question.answers.append(Parag_Model_Answer(False, "viraje rapide alternante, prin care parapanta are ocazional un unghi înclinare laterală de peste 90 °."))
_question.answers.append(Parag_Model_Answer(False, "viraje foarte strânse prin care factorul de încărcare datorat forței centrifuge crește semnificativ."))
_question.answers.append(Parag_Model_Answer(False, "răsucirea chingilor și a suspantelor provocate de rotația parapantei în jurul axei verticale. Datorită inerției pilotului, el nu se poate roti, în general, la fel de repede ca și parapanta."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Termenul "wingover" înseamnă')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "rotația rapidă a parapantei în jurul axei verticale, prin care o jumătate din parapantă zboară spre înainte iar cealaltă spre înapoi."))
_question.answers.append(Parag_Model_Answer(True, "viraje rapide alternante, prin care parapanta are ocazional un unghi înclinare laterală de peste 90 °."))
_question.answers.append(Parag_Model_Answer(False, "viraje foarte strânse prin care factorul de încărcare datorat forței centrifuge crește semnificativ."))
_question.answers.append(Parag_Model_Answer(False, "răsucirea chingilor și a suspantelor provocate de rotația parapantei în jurul axei verticale. Datorită inerției pilotului, el nu se poate roti, în general, la fel de repede ca și parapanta."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Termenul "spirală" (spiral dive) înseamnă')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "rotația rapidă a parapantei în jurul axei verticale, prin care o jumătate din parapantă zboară spre înainte iar cealaltă spre înapoi."))
_question.answers.append(Parag_Model_Answer(False, "viraje rapide alternante, prin care parapanta are ocazional un unghi înclinare laterală de peste 90 °."))
_question.answers.append(Parag_Model_Answer(True, "viraje foarte strânse prin care factorul de încărcare datorat forței centrifuge crește semnificativ."))
_question.answers.append(Parag_Model_Answer(False, "răsucirea chingilor și a suspantelor provocate de rotația parapantei în jurul axei verticale. Datorită inerției pilotului, el nu se poate roti, în general, la fel de repede ca și parapanta."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Coborârea cu "urechi mari" are avantajul că')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "corpul pilotului nu este solicitat fizic în timpul manevrei și parapanta poate fi condusă spre direcția dorită."))
_question.answers.append(Parag_Model_Answer(False, "parapanta nu este deformată și poate atinge o viteză mare de înfundare."))
_question.answers.append(Parag_Model_Answer(False, "manevra este aplicată cu ușurință, se poate atinge o viteză de înfundare mare și fără solcitare fizică a corpului piotului."))
_question.answers.append(Parag_Model_Answer(False, "o viteză mare de înfundare poate fi obținută fără probleme în timpul ieșirii din manevră."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Coborârea în spirală are avantajul că")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "corpul pilotului nu este solicitat fizic în timpul manevrei și parapanta poate fi condusă spre direcția dorită."))
_question.answers.append(Parag_Model_Answer(True, "parapanta nu este deformată și poate atinge o viteză mare de înfundare."))
_question.answers.append(Parag_Model_Answer(False, "manevra este aplicată cu ușurință, se poate atinge o viteză de înfundare mare și fără solcitare fizică a corpului piotului."))
_question.answers.append(Parag_Model_Answer(False, "o viteză mare de înfundare poate fi obținută fără probleme în timpul ieșirii din manevră."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Coborârea în ”angajare cu B-urile” (B stall) are avantajul că")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "corpul pilotului nu este solicitat fizic în timpul manevrei și parapanta poate fi condusă spre direcția dorită."))
_question.answers.append(Parag_Model_Answer(False, "parapanta nu este deformată și poate atinge o viteză mare de înfundare."))
_question.answers.append(Parag_Model_Answer(True, "manevra este aplicată cu ușurință, se poate atinge o viteză de înfundare mare și fără solcitare fizică a corpului piotului."))
_question.answers.append(Parag_Model_Answer(False, "parapanta nu este deformată și corpul pilotului nu este solicitat fizic în timpul manevrei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Când coborâți cu "urechi mari", este important să fiți conștienți de faptul că parapanta în această configurație')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "zboară cu un unghi considerabil mai mare de atac și, prin urmare, este mai susceptibilă de a se angaja parașutat în timpul sau la ieșirea din manevră."))
_question.answers.append(Parag_Model_Answer(False, "zboară cu viteză de înaintare considerabil mai mare, mărind astfel riscul închiderilor frontale."))
_question.answers.append(Parag_Model_Answer(False, "necesită abilități extraordinare ale pilotului, în special în aerul turbulent și solicită fizic pilotul pe perioade mai lungi."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Când coborâți cu "urechi mari", este important să rețineți acest lucru')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "acceleratorul ar trebui să fie aplicat simultan pentru a minimiza riscul angajare parașutată și pentru a crește semnificativ viteza de înfundare."))
_question.answers.append(Parag_Model_Answer(False, "acceleratorul nu trebuie aplicat simultan, astfel încât riscul de închidere frontală să fie minimizat."))
_question.answers.append(Parag_Model_Answer(False, "există o mare solicitare fizică a corpului."))
_question.answers.append(Parag_Model_Answer(False, "parapanta zboară extrem de instabil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question('Când deschideți "urechile mari", este important să rețineți că')
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "cel târziu în timpul apropierii finale, acestea trebuie deschise complet prin pomparea comenzilor."))
_question.answers.append(Parag_Model_Answer(True, "la altitudine mică nu trebuie deschise prin pomparea comenzilor."))
_question.answers.append(Parag_Model_Answer(False, "trebuie deschise prin pompare simultană și forțată a ambelor frâne."))
_question.answers.append(Parag_Model_Answer(False, "în timpul manevrei de aterizare, acestea trebuie deschise numai prin scuturarea suspantelor A din exterior."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când coborâți în spirală, este important să rețineți că")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "există riscul de angajare parașutată la ieșirea din manevră. "))
_question.answers.append(Parag_Model_Answer(False, "numai prin aplicarea simultană a acceleratorului crește considerabil viteza de înfundare. "))
_question.answers.append(Parag_Model_Answer(True, "necesită abilități extraordinare ale pilotului, în special în aerul turbulent și solicită fizic pilotul pe perioade mai lungi."))
_question.answers.append(Parag_Model_Answer(False, "poate fi obținută doar o viteză de înfundare mică."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când executați o angajare cu B-urile, este important să rețineți că")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "există riscul de angajare parașutată la ieșirea din manevră. "))
_question.answers.append(Parag_Model_Answer(False, "numai prin aplicarea simultană a acceleratorului crește considerabil viteza de înfundare. "))
_question.answers.append(Parag_Model_Answer(False, "necesită abilități extraordinare ale pilotului, în special în aerul turbulent și solicită fizic pilotul pe perioade mai lungi."))
_question.answers.append(Parag_Model_Answer(False, "parapanta zboară extrem de instabil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Riscul angajării parașutate în timp ce se iese din angajare cu B-urile poate fi redus la minim")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "ridicându-se mai întâi o chingă B, urmată de cea de-a doua imediat după."))
_question.answers.append(Parag_Model_Answer(False, "lăsând libere ambele B-uri în același timp."))
_question.answers.append(Parag_Model_Answer(True, "ridicând chingile cu mâinile, unde mișcarea din a doua jumătate a cursei trebuie să fie rapidă."))
_question.answers.append(Parag_Model_Answer(False, "ridicând simultan ambele chingi B încet și cu atenție."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Zborul deasupra locului de aterizare înainte de a pierde înălțime și de a începe abordarea aterizării este ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "nepermisă din cauza posibilității de a obstrucționa alte parapante la aterizare. "))
_question.answers.append(Parag_Model_Answer(False, "de evitat ori de câte ori este posibil datorită riscului de coliziune. "))
_question.answers.append(Parag_Model_Answer(True, "recomandat pentru a vă uita la mâneca de vânt. "))
_question.answers.append(Parag_Model_Answer(False, "obligatoriu."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Dacă, atunci când zburați deasupra locului de aterizare, mâneca de vânt nu este vizibilă, ce alte semne ne pot da o idee despre direcția vântului?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "direcția de zbor a păsărilor."))
_question.answers.append(Parag_Model_Answer(True, "fumurile și steagurile din zonă, precum și derivarea laterală în timpul zborului."))
_question.answers.append(Parag_Model_Answer(False, "Direcția de zbor inerentă a parapantei. (Parapantele cu caracteristici stabile de zbor au tendința de a vira împotriva vântului.)"))
_question.answers.append(Parag_Model_Answer(False, "mișcarea norilor de la înălțime."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când aterizați pe o pantă și situația nu vă permite să vă apropiați de-a lungul acesteia, numai contra sau în josul pantei. Care dintre următoarele afirmații este corectă în condiții de vânt zero?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Este mai ușor să aterizezi precis, dar mai greu să aterizezi lin contra pantei."))
_question.answers.append(Parag_Model_Answer(False, "Este mai ușor să aterizezi precis și lin contra pantei."))
_question.answers.append(Parag_Model_Answer(False, "Este mai ușor să aterizezi precis și lin în josul pantei."))
_question.answers.append(Parag_Model_Answer(False, "Este mai ușor să aterizezi precis, dar mai greu să aterizezi lin în josul pantei."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("De ce facem priza de aterizare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Ca formare pentru a trece examenul practic organizat de AZLR."))
_question.answers.append(Parag_Model_Answer(False, "Ca un instrument de memorare pentru incepători."))
_question.answers.append(Parag_Model_Answer(True, "Priza de aterizare este clar identificabilă pentru ceilalți utilizatori ai spațiului aerian și oferă, de asemenea, cea mai mare probabilitate de aterizare precisă."))
_question.answers.append(Parag_Model_Answer(False, "Priza de aterizare nu mai are nici un înțeles practic pentru piloții licențiați."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care element al prizei de aterizare este # 1?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Segmentul cu vânt lateral."))
_question.answers.append(Parag_Model_Answer(True, "Zona pentru pierderea înălțimii. "))
_question.answers.append(Parag_Model_Answer(False, "Segmentul cu vânt din spate."))
_question.answers.append(Parag_Model_Answer(False, "Apropierea finală."))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care element al prizei de aterizare este # 2?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Segmentul cu vânt lateral."))
_question.answers.append(Parag_Model_Answer(False, "Zona pentru pierderea înălțimii. "))
_question.answers.append(Parag_Model_Answer(True, "Segmentul cu vânt din spate."))
_question.answers.append(Parag_Model_Answer(False, "Apropierea finală."))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care element al prizei de aterizare este # 3?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Segmentul cu vânt lateral."))
_question.answers.append(Parag_Model_Answer(False, "Zona pentru pierderea înălțimii. "))
_question.answers.append(Parag_Model_Answer(False, "Segmentul cu vânt din spate."))
_question.answers.append(Parag_Model_Answer(False, "Apropierea finală."))
_question.image ="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"
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care element al prizei de aterizare este # 4?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Segmentul cu vânt lateral."))
_question.answers.append(Parag_Model_Answer(False, "Zona pentru pierderea înălțimii. "))
_question.answers.append(Parag_Model_Answer(False, "Segmentul cu vânt din spate."))
_question.answers.append(Parag_Model_Answer(True, "Apropierea finală."))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Cum pierdem excesul de înălțime înainte de a intra în segmentul cu vânt din spate?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Zurând în cerc spre stânga."))
_question.answers.append(Parag_Model_Answer(False, "Zurând în cerc spre dreapta."))
_question.answers.append(Parag_Model_Answer(True, "Zurând în cerc în aceeași sens ca și virajele din priza de aterizare."))
_question.answers.append(Parag_Model_Answer(False, "Făcând o serie de viraje alternante."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Dacă ești obligat să faci o priză de aterizare spre stânga, în ce sector ar trebui să pierzi înălțimea înainte de a intra în segmentul cu vânt din spate?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(True, "2"))
_question.answers.append(Parag_Model_Answer(False, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image ="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"
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Dacă ești obligat să faci o priză de aterizare spre dreapta, în ce sector ar trebui să pierzi înălțimea înainte de a intra în segmentul cu vânt din spate?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(True, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Fiecare diagramă prezintă o priză de aterizare standard în vânt zero (linie punctată) și o priză de aterizare practică în funcție de condiții (linie solidă). Cum ar trebui abordată aterizarea cu vânt zero când  pilotul își dă seama, după segmentul cu vânt din spate, că înălțimea lui este prea mică?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(True, "2"))
_question.answers.append(Parag_Model_Answer(False, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Fiecare diagramă prezintă o priză de aterizare standard în vânt zero (linie punctată) și o priză de aterizare practică în funcție de condiții (linie solidă). Cum ar trebui abordată aterizarea cu vânt zero când  pilotul își dă seama, în timpul segmentul cu vânt lateral, că înălțimea lui este prea mare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(False, "3"))
_question.answers.append(Parag_Model_Answer(True, "4"))
_question.image ="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"
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Fiecare diagramă prezintă o priză de aterizare standard în vânt zero (linie punctată) și o priză de aterizare practică în funcție de condiții (linie solidă). Cum ar trebui abordată aterizarea cu vânt 10-15 km/h?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(False, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image =""
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Fiecare diagramă prezintă o priză de aterizare standard în vânt zero (linie punctată) și o priză de aterizare practică în funcție de condiții (linie solidă). Cum ar trebui abordată aterizarea cu vânt 25-30 km/h?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "1"))
_question.answers.append(Parag_Model_Answer(False, "2"))
_question.answers.append(Parag_Model_Answer(True, "3"))
_question.answers.append(Parag_Model_Answer(False, "4"))
_question.image ="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"
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot ajunge locul de aterizare chiar înaintea altor doi piloți care se află la 50 de metri de el. Vântul este zero, nu există obstacole și nu există o direcție de aterizare convenită. Cum ar trebui să aterizeze?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Ar trebui să realizeze priza de aterizare, dar este liber să aleagă direcția de aterizare și sensul de întoarcere."))
_question.answers.append(Parag_Model_Answer(True, "Fiind primul, poate alege direcția de aterizare, dar trebuie să execute o priză de aterizare spre stânga."))
_question.answers.append(Parag_Model_Answer(False, "Fiind primul, poate alege sensul prizei de aterizare, dar trebuie să aterizeze la 90 ° față de axa văii."))
_question.answers.append(Parag_Model_Answer(False, "Primul care aterizează trebuie să execute o priză de aterizare spre stânga și să aterizeze la 90 ° față de axa văii."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Un pilot ajunge locul de aterizare chiar înaintea altor doi piloți care se află la 50 de metri de el. Vântul este zero, nu există obstacole și nu există o direcție de aterizare convenită. Cum ar trebui să aterizeze? El decide să aterizeze spre vest fîcând o priză de aterizare spre stânga. Pe segmentul cu vânt lateral realizează că există un vânt de est de 2-5 km / h. Ce ar trebui să facă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Continuați cu priza de aterizare, alegeți un unghi de apropiere finală mai abrupt."))
_question.answers.append(Parag_Model_Answer(False, "Opriți imediat priza de aterizare, zburați spre partea de sub vânt a locului de aterizare și aterizați în vânt."))
_question.answers.append(Parag_Model_Answer(True, "Continuați cu priza de aterizare, alegeți un unghi de apropiere finală mai mic."))
_question.answers.append(Parag_Model_Answer(False, "Considerați segmentul cu vânt din spate  ca fiind segmentul cu vânt lateral și aterizați cu vânt lateral."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Atunci când aterizați cu vânt de spate unghiul de apropiere este")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "mai mic și viteza de aterizare mai mică."))
_question.answers.append(Parag_Model_Answer(False, "mai mare și viteza de aterizare mai mare."))
_question.answers.append(Parag_Model_Answer(True, "mai mic și viteza de aterizare mai mare."))
_question.answers.append(Parag_Model_Answer(False, "mai mare și viteza de aterizare mai mică."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Atunci când aterizați cu vânt de față unghiul de apropiere este")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "mai mic și viteza de aterizare mai mică."))
_question.answers.append(Parag_Model_Answer(False, "mai mare și viteza de aterizare mai mare."))
_question.answers.append(Parag_Model_Answer(False, "mai mic și viteza de aterizare mai mare."))
_question.answers.append(Parag_Model_Answer(True, "mai mare și viteza de aterizare mai mică."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe segmentul cu vânt din spate al prizei de aterizare vă dați seama că sunteți prea sus. Ce ar trebui să faceți?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Zburați un cerc în sensul prizei de aterizare."))
_question.answers.append(Parag_Model_Answer(False, "Frânați parapanta pentru a reduce finețea acesteia."))
_question.answers.append(Parag_Model_Answer(False, "Reveniți în poziția de pierdere a înălțimii și reporniți cu segmentul cu vânt din spate."))
_question.answers.append(Parag_Model_Answer(True, "Faceți mai lungi următoarele segmentele ale prizei de aterizare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe segmentul cu vânt din spate al prizei de aterizare vă dați seama că sunteți prea jos. Ce ar trebui să faceți?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Considerați segmentul cu vânt din spate  ca fiind segmentul cu vânt lateral și aterizați cu vânt lateral."))
_question.answers.append(Parag_Model_Answer(False, "Frânați ușor parapanta pentru a îmbunătăți finețea."))
_question.answers.append(Parag_Model_Answer(False, "Zburați direct la punctul de aterizare planificat și zburați în cerc până aterizați."))
_question.answers.append(Parag_Model_Answer(True, "Faceți mai scurte următoarele segmentele ale prizei de aterizare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe segmentul cu vânt lateral al prizei de aterizare vă dați seama că sunteți prea sus. Ce ar trebui să faceți?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Zburați încă un cerc în direcția de întoarcere a prizei de aterizare. "))
_question.answers.append(Parag_Model_Answer(False, "Frânați parapanta pentru a reduce finețea. "))
_question.answers.append(Parag_Model_Answer(True, "Lungiți segmentul cu vânt lateral și, dacă este necesar, repetați-l. "))
_question.answers.append(Parag_Model_Answer(False, "Reveniți în poziția de pierdere a înălțimii și reporniți cu segmentul cu vânt din spate."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe segmentul cu vânt lateral al prizei de aterizare vă dați seama că sunteți prea jos. Ce ar trebui să faceți?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Scurtați segmentul cu vânt lateral sau abandonați-l în întregime."))
_question.answers.append(Parag_Model_Answer(False, "Frânați ușor parapanta pentru a îmbunătăți finețea."))
_question.answers.append(Parag_Model_Answer(False, "Zburați direct la punctul de aterizare planificat și zburați în cerc până aterizați."))
_question.answers.append(Parag_Model_Answer(False, "Considerați segmentul cu vânt din spate  ca fiind segmentul cu vânt lateral și aterizați cu vânt lateral."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe apropierea finală a prizei de aterizare vă dați seama că sunteți puțin prea sus. Ce ar trebui să faceți?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Zburați încă un cerc în direcția de întoarcere a prizei de aterizare. "))
_question.answers.append(Parag_Model_Answer(True, "Frânați parapanta pentru a reduce finețea și ridicați-vă în poziție verticală pentru a crește rezistența la înaintare."))
_question.answers.append(Parag_Model_Answer(False, "Zburați peste punctul de aterizare, virați 180 ° și aterizați din direcția opusă."))
_question.answers.append(Parag_Model_Answer(False, "Creșteți viteza pentru a mări rezistența la înaintare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Pe segmentul cu vânt lateral, realizeați că sunteți prea jos. Ce ar trebui să faceți? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "O aterizare inexactă este inevitabilă. "))
_question.answers.append(Parag_Model_Answer(False, "Frânați ușor parapanta pentru a îmbunătăți finețea. "))
_question.answers.append(Parag_Model_Answer(True, "Zburați cu zero comenzi până la nivelul solului, apoi trageți ușor și continuu comenzile. "))
_question.answers.append(Parag_Model_Answer(False, "Frânați parapanta 50% pentru a zbura cât mai mult posibil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În apropierea finală, pilotul aplică 80% comenzile fără să se angajeze, dacă menține comenzile frânate astfel mult timp ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "este foarte probabil ca după o vreme parapanta să se angajeze. "))
_question.answers.append(Parag_Model_Answer(False, "parapanta va zbura cu o viteză redusă, dar constantă. "))
_question.answers.append(Parag_Model_Answer(False, "viteza parapantei va crește încet și continuu. "))
_question.answers.append(Parag_Model_Answer(False, "viteza de înaintare și viteza de înfundare vor scădea continuu."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce trebuie să faceți imediat după aterizare? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Scoateți imediat seleta și casca. "))
_question.answers.append(Parag_Model_Answer(True, "Părăsiți imediat zona de aterizare. "))
_question.answers.append(Parag_Model_Answer(False, "Împachetați imediat parapanta și băgăți-o în rucsac. "))
_question.answers.append(Parag_Model_Answer(False, "Înregistrați zborul în carnetul de zbor."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("La locul de aterizare bate vântul cu 25 km / h. De îndată ce picioarele ating pământul, ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "trageți comenzile cât mai mult posibil pentru a opri imediat zborul care zboară."))
_question.answers.append(Parag_Model_Answer(False, "rotiți-vă 180 ° spre parapantă și trageți comenzile la maxim pentru a opri imediat parapanta din zbor."))
_question.answers.append(Parag_Model_Answer(False, "trageți o comandă la maxim, astfel încât parapanta să coboare pe bordul de atac și să înceteze să producă portanță."))
_question.answers.append(Parag_Model_Answer(True, "rotiți-vă 180 ° spre parapantă și trageți chingile B sau C pentru a opri imediat parapanta din zbor."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când se aterizează pe o pantă abruptă, apropierea finală ar trebui să fie")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "în contrapanta."))
_question.answers.append(Parag_Model_Answer(True, "paralel cu panta."))
_question.answers.append(Parag_Model_Answer(False, "în josul pantei."))
_question.answers.append(Parag_Model_Answer(False, "contra vântului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Sunteți la altitudine și este necesar să alegeți un teren de aterizare situat într-o vale, cu vânt de de 25 km / h. Care dintre caracteristicile terenului de aterizare sunt cele mai importante pentru a efectua o aterizare sigură?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Latura câmpului trebuie să fie liberă de copaci sau clădiri pentru cel puțin 100 m pentru segmentul cu vânt lateral și apropierea finală."))
_question.answers.append(Parag_Model_Answer(False, "Câmpul de aterizare trebuie să fie protejat de vânt cât mai mult posibil de denivelări, copaci sau clădiri."))
_question.answers.append(Parag_Model_Answer(True, "Partea din vânt a terenului trebuie să fie cât se poate de plată și fără copaci și clădiri."))
_question.answers.append(Parag_Model_Answer(False, "Terenul nu trebuie să se încline spre vânt."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Sunteți nevoiți să aterizați cu vânt de 20 km / h într-un câmp înconjurat de clădiri. La ce ar trebui să vă așteptați? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Turbulențe puternice la nivelul acoperișului, aer calm la nivelul solului. "))
_question.answers.append(Parag_Model_Answer(True, "Turbulențe puternice pe întreaga apropiere finală a prizei. "))
_question.answers.append(Parag_Model_Answer(False, "Condiții ideale de aterizare într-un câmp protejat de vânt. "))
_question.answers.append(Parag_Model_Answer(False, "Plutire lungă chiar deasupra solului datorită efectului de sol pronunțat. "))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care dintre următoarele măsuri de precauție ar trebui luate atunci când sunteți forțat să aterizați în apă stătătoare sau curgătoare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Deschideți cât mai multe din chigile seletei înaintea aterizării."))
_question.answers.append(Parag_Model_Answer(False, "Aruncați rezerva chiar înainte de a ateriza, astfel încât aceasta să asigure o flotabilitate suplimentară în apă."))
_question.answers.append(Parag_Model_Answer(False, "Deconectați toate dispozitivele electronice (radio, variometru etc) și țineți-le deasupra capului, astfel încât să nu se ude."))
_question.answers.append(Parag_Model_Answer(False, "Strângeți toate chingile seletei astfel încât să nu ieșiți din greșeală din seletă după aterizare, iar parapanta să se scufunde sau să fie luată de curent."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În cazul aterizării într-un copac, ce provoacă cele mai grave răniri? ")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Ramurile se rup sub greutatea pilotului și a parapantei iar pilotul cade pe pământ. "))
_question.answers.append(Parag_Model_Answer(True, "Pilotul iese din seletă, fără a a se asigura cu o frânghie, ramurile se rup și cade din copac. "))
_question.answers.append(Parag_Model_Answer(False, "Pilotul este rănit prin impactul cu copacul. "))
_question.answers.append(Parag_Model_Answer(False, "Parapanta și pilotul alunecă pe coroana copacului si acesta cade pe pământ."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("După aterizare, parapanta se agață în coroana unui copac. Cum recuperăm parapanta cu minim de deteriorări parapantei?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Recuperați parapanta folosind un elicopter."))
_question.answers.append(Parag_Model_Answer(False, "Desfaceți parapnat de la seletă."))
_question.answers.append(Parag_Model_Answer(True, "Desfaceți carabinele rapide cu filet și eliberați supantele de pe chingi și mânerele comanzilor."))
_question.answers.append(Parag_Model_Answer(False, "Conectați o coardă lungă la seletă și trageți de parapantă în plan orizontal de cât mai departe posibil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În ce situație în aer există risc maxim de coliziune între un deltaplan și o parapantă, mai ales că nici unul dintre piloți nu se poate vedea unul pe celălalt.")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Deltaplanul se apropie de parapantă din față și de sus."))
_question.answers.append(Parag_Model_Answer(True, "Deltaplanul se apropie de parapantă din spate și de jos."))
_question.answers.append(Parag_Model_Answer(False, "Deltaplanul se apropie de parapantă din față și de jos."))
_question.answers.append(Parag_Model_Answer(False, "Deltaplanul se apropie de parapantă din spate și de sus."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("O parapantă zboară în aceeași termică și la aceeași altitudine cu un deltaplan. Cum poate pilotul de parapantă să se pună și pe el si pe pilotul de deltaplan în pericol?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Dacă zboară cercuri foarte strânse."))
_question.answers.append(Parag_Model_Answer(True, "Schimbând brusc direcția de rotație."))
_question.answers.append(Parag_Model_Answer(False, "Zburând încet"))
_question.answers.append(Parag_Model_Answer(False, "Întorcând în aceeași direcție ca și deltaplanul."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când folosim parașutul de rezervă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "De îndată ce aripa se închide (închidere frontală completă pe întreaga anvergură a aripii)."))
_question.answers.append(Parag_Model_Answer(True, "De îndată ce situația pare a fi incontrolabilă."))
_question.answers.append(Parag_Model_Answer(False, "Când este aspirat într-un nor cumulus și variometrul indică o viteză de urcare de peste 6 m / s."))
_question.answers.append(Parag_Model_Answer(False, "Când avem o închidere asimetrică în apropierea finală la aterizare."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În care din următoarele situații ar trebui aruncată parașuta de rezervă, imediat și fără ezitare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "O treimedin parapantă este închisă și prinsă în conul de suspantaj (cravată)."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta este aspirată într-un nor cumulus și urcă cu 8 m / s."))
_question.answers.append(Parag_Model_Answer(False, "O parte a parapantei se angajează și parapanta intră în rotație (vrie negativă)."))
_question.answers.append(Parag_Model_Answer(True, "În urma coliziunii între un deltaplan și o parapantă."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("În care din următoarele situații ar trebui aruncată parașuta de rezervă, imediat și fără ezitare?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "O treimedin parapantă este închisă și prinsă în conul de suspantaj (cravată)."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta este aspirată într-un nor cumulus și urcă cu 8 m / s."))
_question.answers.append(Parag_Model_Answer(True, "După o vrie negativă, când chingile sunt răsucite de câteva ori și parapanta începe să intre într-o spirală accentuată de la sine."))
_question.answers.append(Parag_Model_Answer(False, "O parte a parapantei se angajează și parapanta intră în rotație (vrie negativă)."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce trebuie să facă un pilot imediat după ce a aruncat parașuta de rezervă?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "Pilotul trebuie să împiedice parapanta să continue să zboare prin tragerea simetrică a chingilor B, C sau D și să se ridice într-o poziție verticală."))
_question.answers.append(Parag_Model_Answer(False, "Pilotul își asumă o poziție cât mai orizontal posibilă și își trage brațele și picioarele aproape de corp (poziția embrionului)."))
_question.answers.append(Parag_Model_Answer(False, "Parapanta trebuie să fie pilotată cu comenzile astfel încât să nu se apropie și să se încurce cu parașuta."))
_question.answers.append(Parag_Model_Answer(False, "Pilotul începe să deschidă seleta din timpul coborârii, pentru a se separa de parapantă cât mai repede posibil."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Atunci când un pilot este primul la locul unui accident, el ar trebui să urmeze următoarele etape:")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(True, "1. Căile aeriene libere? - 2. Este necesară respirația artificială? - 3. Masaj cardiorespirator necesar?"))
_question.answers.append(Parag_Model_Answer(False, "1. Ce sa întâmplat? - 2. Cine este responsabil? - 3. Ce măsuri trebuie luate?"))
_question.answers.append(Parag_Model_Answer(False, "1. Este conștient? - 2. Poate să se ridice? - 3. Poate merge?"))
_question.answers.append(Parag_Model_Answer(False, "1. Este rănit? - 2. Este în stare de șoc? - 3. Trebuie să fie transportat?"))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Ce măsuri trebuie luate în cazul descoperirii victimei unui accident care nu răspunde, dar care respiră, nu are leziuni externe și are puls. Victima ar trebui să fie")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "întinsă pe spate cu picioarele ridicate."))
_question.answers.append(Parag_Model_Answer(True, "poziționată pe o parte (poziția laterală de siguranță) și protejat de vreme (soare, vânt, frig și umiditate)."))
_question.answers.append(Parag_Model_Answer(False, "întinsă pe burtă și să i se dea băuturi răcoritoare ca să-l trezească."))
_question.answers.append(Parag_Model_Answer(False, "adus în poziție șezând și protejat de vreme (soare, vânt, frig și umiditate)."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Dacă o persoană accidentată prezintă semne de leziuni ale coloanei vertebrale, victima ar trebui să fie")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "întinsă pe burtă și protejată de vreme."))
_question.answers.append(Parag_Model_Answer(True, "împiedicată să se miște, să șeadă sau să încerce să meargă."))
_question.answers.append(Parag_Model_Answer(False, "adusă în poziție șezând și protejată de vreme."))
_question.answers.append(Parag_Model_Answer(False, "ridicată imediat pentru a verifica dacă poate merge sau nu."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Care simptome semnalează leziunea coloanei vertebrale?")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "Victima este palidă, are buze albastre, sudoare rece, un puls rapid și slab și vorbește incoerent."))
_question.answers.append(Parag_Model_Answer(False, "Victima are dureri puternice la picioare."))
_question.answers.append(Parag_Model_Answer(True, "Victima are dureri de spate, nu are simț în picioare, brațe sau mâini."))
_question.answers.append(Parag_Model_Answer(False, "Victima este inconștientă."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""
_question       = Parag_Model_Question("Când victima unui accident trebuie să fie transportată cu elicopterul, înainte de sosirea acestuia ar trebui să")
_category.questions.append(_question)
_question.answers.append(Parag_Model_Answer(False, "scoateți casca și seleta victimei și puneți-le în rucsac."))
_question.answers.append(Parag_Model_Answer(True, "opriți imediat toate zborurile în imediata vecinătate a zonei accidentului, îndepărtați toate parapantele, jachetele și alte obiecte libere din zona accidentului și din împrejurimi."))
_question.answers.append(Parag_Model_Answer(False, "marcați scena accidentului cu parapanta."))
_question.answers.append(Parag_Model_Answer(False, "părăsiți imediat zona accidentului."))
"""*************************************************************************************************
****************************************************************************************************
*************************************************************************************************"""